EJERCICIO 1 ================================================================================================================================================================
  static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

                Auto auto = new Auto();
                Libro libro = new Libro();
                Persona persona = new Persona();
                Perro perro = new Perro();
                Pelicula pelicula = new Pelicula();

                Procesador.Alquilar(pelicula, persona);
                Procesador.Alquilar(libro, persona);
                Procesador.Atender(persona);
                Procesador.Atender(perro);
                Procesador.Devolver(pelicula, persona);
                Procesador.Devolver(libro, persona);
                Procesador.Lavar(auto);
                Procesador.Reciclar(libro);
                Procesador.Reciclar(auto);
                Procesador.Secar(auto);
                Procesador.Vender(auto, persona);
                Procesador.Vender(perro, persona);
                            
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
    }
    public class Persona :IAtendible
    {
        private String _Nombre = "Carlitos";
        public String Nombre
        {
            get{
                return _Nombre;         
               }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
    }
    public class Perro  : IVendible,IAtendible
    {
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }

    }
    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
}
EJERCICIO 2 ================================================================================================================================================================
static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

             Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            Pelicula peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable ,IVendible
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
        public virtual void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula a {p.Nombre}");
        }
    }
    public class PeliculaClasica : Pelicula //, IAlquilable , IVendible no es necesario que pelicula clasica implemente las interfaces ya que pelicula ya las implementa
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public override void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible
    {
        private String _Nombre = "Carlitos";
        public String Nombre
        {
            get{
                return _Nombre;         
               }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable
    {
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }

    }



    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    
EJERCICIO 3 ================================================================================================================================================================

  class Program
    {
         static  class Procesador
        {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

            
            Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            PeliculaClasica peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
            

            System.Collections.ArrayList lista = new System.Collections.ArrayList() {new Persona(),new Auto()};
            foreach(IComercial c in lista)
            {
                c.Importar();
            }
            foreach(IImportante i in lista)
            {
                i.Importar();
            }
            (lista[0] as Persona).Importar();
            (lista[1] as Auto).Importar();
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable ,IComercial,IImportante
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Auto importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Auto que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable 
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }

    }
    public class PeliculaClasica : Pelicula ,IVendible
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible ,IComercial,IImportante
    {
        private String _Nombre = "Carlitos";
        public String Nombre
        {
            get{
                return _Nombre;         
               }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Persona importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Persona que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase persona");
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable
    {
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }

    }



    public interface IAlquilable
    {
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    public interface IComercial
    {
        public void Importar();
    }
    public interface IImportante
    {
        public void Importar();
    }

           
    }
EJERCICIO 4 ================================================================================================================================================================

  static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

            /* 
            Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            Pelicula peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
            */

            /*
            System.Collections.ArrayList lista = new System.Collections.ArrayList() {new Persona(),new Auto()};
            foreach(IComercial c in lista)
            {
            c.Importar();
            }
            foreach(IImportante i in lista)
            {
            i.Importar();
            }
            (lista[0] as Persona).Importar();
            (lista[1] as Auto).Importar();
            */

            System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Zulema"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Claudia"},
            new Persona() {Nombre="Carlos"},
            new Perro() {Nombre="Chopper"},
            };
           lista.Sort(); //debe ordenar por Nombre alfabéticamente
            foreach (INombrable n in lista)
            {
                Console.WriteLine($"{n.Nombre} es un {n.GetType().Name}");
            }
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable ,IComercial,IImportante
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Auto importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Auto que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable ,IVendible
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
        public virtual void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula a {p.Nombre}");
        }
    }
    public class PeliculaClasica : Pelicula
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public override void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible ,IComercial,IImportante,IComparable,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Persona importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Persona que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase persona");
        }
        public int CompareTo(object obj)
        {
            String strA=this.Nombre;
            String strB=(obj as INombrable).Nombre;
            return strA.CompareTo(strB);
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable,IComparable ,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }
        public int CompareTo(object obj)
        {
            String strA=this.Nombre;
            String strB=(obj as INombrable).Nombre;
            return strA.CompareTo(strB);
        }

    }



    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    public interface IComercial
    {
        public void Importar();
    }
    public interface IImportante
    {
        public void Importar();
    }
    public interface INombrable
    {
        String Nombre {set;get;}
    }

EJERCICIO 5 ================================================================================================================================================================

  static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

            /* 
            Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            Pelicula peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
            */

            /*
            System.Collections.ArrayList lista = new System.Collections.ArrayList() {new Persona(),new Auto()};
            foreach(IComercial c in lista)
            {
            c.Importar();
            }
            foreach(IImportante i in lista)
            {
            i.Importar();
            }
            (lista[0] as Persona).Importar();
            (lista[1] as Auto).Importar();
            */

            System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Zulema"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Claudia"},
            new Persona() {Nombre="Carlos"},
            new Perro() {Nombre="Chopper"},
            };
           lista.Sort(); //debe ordenar por Nombre alfabéticamente
            foreach (INombrable n in lista)
            {
                Console.WriteLine($"{n.Nombre} es un {n.GetType().Name}");
            }
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable ,IComercial,IImportante
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Auto importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Auto que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable ,IVendible
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
        public virtual void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula a {p.Nombre}");
        }
    }
    public class PeliculaClasica : Pelicula
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public override void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible ,IComercial,IImportante,IComparable,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Persona importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Persona que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase persona");
        }
        public int CompareTo(object obj)
        {
            String strA=this.Nombre;
            String strB=(obj as INombrable).Nombre;
            return strA.CompareTo(strB);
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable,IComparable ,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }
        public int CompareTo(object obj)
        {
            String strA=this.Nombre;
            String strB=(obj as INombrable).Nombre;
            if(obj is Persona){
                return 1;
            }
            return strA.CompareTo(strB);
        }

    }



    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    public interface IComercial
    {
        public void Importar();
    }
    public interface IImportante
    {
        public void Importar();
    }
    public interface INombrable
    {
        String Nombre {set;get;}
    }

EJERCICIO 6 ================================================================================================================================================================
  static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

            /* 
            Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            Pelicula peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
            */

            /*
            System.Collections.ArrayList lista = new System.Collections.ArrayList() {new Persona(),new Auto()};
            foreach(IComercial c in lista)
            {
            c.Importar();
            }
            foreach(IImportante i in lista)
            {
            i.Importar();
            }
            (lista[0] as Persona).Importar();
            (lista[1] as Auto).Importar();
            */

           /* System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Zulema"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Claudia"},
            new Persona() {Nombre="Carlos"},
            new Perro() {Nombre="Chopper"},
            };
           lista.Sort(); //debe ordenar por Nombre alfabéticamente
            foreach (INombrable n in lista)
            {
                Console.WriteLine($"{n.Nombre} es un {n.GetType().Name}");
            }
            */

            System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Ana María"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Ana"},
            new Persona() {Nombre="José Carlos"},
            new Perro() {Nombre="Chopper"}
            };
            lista.Sort(new ComparadorLongitudNombre()); //ordena por longitud de Nombre
            foreach (INombrable n in lista)
            {
            Console.WriteLine($"{n.Nombre.Length}: {n.Nombre}");
            }
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable ,IComercial,IImportante
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Auto importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Auto que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable ,IVendible
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
        public virtual void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula a {p.Nombre}");
        }
    }
    public class PeliculaClasica : Pelicula
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public override void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible ,IComercial,IImportante,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Persona importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Persona que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase persona");
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }

    
    }
    public class ComparadorLongitudNombre : IComparer
    {
        public int Compare(object x,object y)
        {
            int long1=((INombrable)x).Nombre.Length;
            int long2=((INombrable)y).Nombre.Length;
            return long1 - long2;
        }
    }

    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    public interface IComercial
    {
        public void Importar();
    }
    public interface IImportante
    {
        public void Importar();
    }
    public interface INombrable
    {
        String Nombre {set;get;}
    }
  
EJERCICIO 7 ================================================================================================================================================================
  static  class Procesador
    {
        
        public static void Main()
        {
            Ejecutar();
            Console.ReadKey();
        }
        public static void Ejecutar() {

            /* 
            Auto auto = new Auto();
            Libro libro = new Libro();
            Persona persona = new Persona();
            Perro perro = new Perro();
            Pelicula pelicula = new Pelicula();
            Procesador.Alquilar(pelicula, persona);
            Procesador.Alquilar(libro, persona);
            Procesador.Atender(persona);
            Procesador.Atender(perro);
            Procesador.Devolver(pelicula, persona);
            Procesador.Devolver(libro, persona);
            Procesador.Lavar(auto);
            Procesador.Reciclar(libro);
            Procesador.Reciclar(auto);
            Procesador.Secar(auto);
            Procesador.Vender(auto, persona);
            Procesador.Vender(perro, persona);
            Procesador.Lavar(perro);
            Procesador.Secar(perro);
            Pelicula peliculaClasica = new PeliculaClasica();
            Procesador.Alquilar(peliculaClasica, persona);
            Procesador.Devolver(peliculaClasica, persona);
            Procesador.Vender(peliculaClasica, persona);
            */

            /*
            System.Collections.ArrayList lista = new System.Collections.ArrayList() {new Persona(),new Auto()};
            foreach(IComercial c in lista)
            {
            c.Importar();
            }
            foreach(IImportante i in lista)
            {
            i.Importar();
            }
            (lista[0] as Persona).Importar();
            (lista[1] as Auto).Importar();
            */

           /* System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Zulema"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Claudia"},
            new Persona() {Nombre="Carlos"},
            new Perro() {Nombre="Chopper"},
            };
           lista.Sort(); //debe ordenar por Nombre alfabéticamente
            foreach (INombrable n in lista)
            {
                Console.WriteLine($"{n.Nombre} es un {n.GetType().Name}");
            }
            */

            System.Collections.ArrayList lista = new System.Collections.ArrayList() {
            new Persona() {Nombre="Ana María"},
            new Perro() {Nombre="Sultán"},
            new Persona() {Nombre="Ana"},
            new Persona() {Nombre="José Carlos"},
            new Perro() {Nombre="Chopper"}
            };
            lista.Sort(new ComparadorAlAzar()); //ordena por longitud de Nombre
            foreach (INombrable n in lista)
            {
            Console.WriteLine($"{n.Nombre.Length}: {n.Nombre}");
            }
        }

        public static void Alquilar (IAlquilable x,Persona p)=> x.Alquilar(p);
        public static void Devolver (IAlquilable x, Persona p) => x.Devolver(p);
        public static void Vender (IVendible x,Persona p) => x.Vender(p);
        public static void Lavar(ILavable x) => x.Lavar();
        public static void Secar(ILavable x) => x.Secar();
        public static void Reciclar(IReciclable x) => x.Reciclar();
        public static void Atender(IAtendible x) => x.Atender();
    }

    public class Auto :IVendible , ILavable ,IReciclable ,IComercial,IImportante
    {

        public void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo auto a {p.Nombre}");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava auto");
        }
        public void Secar()
        {
            Console.WriteLine("se seca auto");
        }
        public void Reciclar(){
            Console.WriteLine("se recicla auto");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Auto importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Auto que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase auto");
        }
    }   
    public class Libro : IReciclable ,IAlquilable
    {
        public void Alquilar(Persona p)
        {
            Console.WriteLine($"Alquilando libro a {p.Nombre}");
        }
        public void Devolver(Persona p){
            Console.WriteLine($"{p.Nombre} devuelve libro");
        }
        public void Reciclar()
        {
            Console.WriteLine("se recicla libro");
        }
    }
    public class Pelicula: IAlquilable ,IVendible
    {
        public virtual void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula");
        }
        public  virtual void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula");
        }
        public virtual void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula a {p.Nombre}");
        }
    }
    public class PeliculaClasica : Pelicula
    {
        public override void Alquilar(Persona p)
        {
            Console.WriteLine($"{p.Nombre} alquila pelicula clasica");
        }
        public override void Devolver(Persona p)
        {
            Console.WriteLine($"{p.Nombre} devuelve pelicula clasica");
        }
        public override void Vender(Persona p)
        {
            Console.WriteLine($"vendiendo pelicula clasica a {p.Nombre}");
        }
    }
    public class Persona :IAtendible ,IComercial,IImportante,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Atender(){
            Console.WriteLine($"{_Nombre} es atendida");
        }
        void IImportante.Importar()
        {
            Console.WriteLine("Persona importante");
        }
        void IComercial.Importar()
        {
            Console.WriteLine("Persona que se vende al exterior");
        }
        public void Importar()
        {
            Console.WriteLine("método importar de clase persona");
        }
    }
    public class Perro  : IVendible,IAtendible,ILavable,INombrable
    {
        private String _Nombre;
        public String Nombre
        {
            get{
                return _Nombre;         
               }
            set{
                this._Nombre=value;
            }
        }
        public void Vender(Persona p)
        {
            Console.WriteLine($"{p.Nombre} vende perro :c");
        }
        public void Atender()
        {
            Console.WriteLine("Perro es atendido");
        }
        public void Lavar()
        {
            Console.WriteLine("se lava perro");
        }
        public void Secar()
        {
            Console.WriteLine("se seca perro");
        }

    
    }
    public class ComparadorAlAzar : IComparer
    {
        public int Compare(object x,object y)
        {
            return (new Random().Next(-10,10)); //con cotas chicas no funciona muy bien el random
        }
    }

    public interface IAlquilable
    {
    
        public void Alquilar(Persona P);
      
        public void Devolver(Persona P);
    }
    public interface IVendible
    {
        public void Vender(Persona p);
    }
    public interface ILavable
    {
        public void Lavar();
        public void Secar();
    }
    public interface IReciclable
    {
        public void Reciclar();
    }
    public interface IAtendible
    {
        public void Atender();
    }
    public interface IComercial
    {
        public void Importar();
    }
    public interface IImportante
    {
        public void Importar();
    }
    public interface INombrable
    {
        String Nombre {set;get;}
    }
EJERCICIO 8 ================================================================================================================================================================

  static  class Program
    {
        
        public static void Main()
        {
            IEnumerable rango = Rango(6, 30, 3);
            IEnumerable potencias = Potencias(2, 10);
            IEnumerable divisibles = DivisiblesPor(rango, 6);
            foreach (int i in rango)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
            foreach (int i in potencias)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
            foreach (int i in divisibles)
            {
                Console.Write(i + " ");
            }
             Console.ReadKey();
        }
        static IEnumerable Rango(int i, int j , int p) //puede devolver IEnumerator pero vamos a tener que usar los métodos .MoveNext() en un while
        {
            //este bloque de código es mi iterador los yield te simplifican todo
            //este método no se ejecuta nunca,  el compilador se encarga de generar una máquina de estados finitos
             int aux =i;
            while (true) {
                i=aux;
                if (i <= j) 
                {
                    aux+=p;
                    yield return i; 
                }
                else {
                    yield break; //detiene la iteracion
                }
            }   
        }  

        static IEnumerable Potencias(int Base,int exponenteMax)
        {
            int exponenteAct=0;
            while(true){
                if(exponenteAct < exponenteMax)
                {
                    exponenteAct++;
                    yield return (int)Math.Pow(Base,exponenteAct);
                }
                else
                {
                    yield break;
                }
            }
        }

        static IEnumerable DivisiblesPor(IEnumerable rango,int divisor)
        {
            foreach(int i in rango)
            {
                if(i % divisor == 0)
                {
                    yield return i;
                }
            }
            yield break;
        }

        
    }
EJERCICIO 9 ================================================================================================================================================================

A--------------------------------------------------------------------------------------------------------------------------------------------------------------------
static void Main (String[] args)
            {
                StringBuilder strB = new StringBuilder();
                Console.WriteLine("Ingrese el texto");
                String aux;
                aux=Console.ReadLine();
                while(aux != ""){
                        strB.Append(aux + "\n");
                        aux=Console.ReadLine();
                }
                

                
                Console.WriteLine();

                Console.WriteLine("Ingrese el nombre del archivo");

                StreamWriter sw = null;

               try{
                    using(sw=new StreamWriter(Console.ReadLine()))
                    {
                        sw.Write(strB);
                        Console.WriteLine($"Se guardó en {Environment.CurrentDirectory}");
                    } 
               }
               catch(Exception e)
               {    
                   Console.WriteLine(e.Message);  //agregué el try catch porque no tengo manera de saber de cuando hubo un error sin el 
               }
           
                Console.ReadKey();
                   
            }
B--------------------------------------------------------------------------------------------------------------------------------------------------------------------
static void Main (String[] args)
            {
                StringBuilder strB = new StringBuilder();
                Console.WriteLine("Ingrese el texto");
                String aux;
                aux=Console.ReadLine();
                while(aux != ""){
                        strB.Append(aux + "\n");
                        aux=Console.ReadLine();
                }
                

                
                Console.WriteLine();

                Console.WriteLine("Ingrese el nombre del archivo");

                StreamWriter sw = null;

                try
                {
                    sw=new StreamWriter(Console.ReadLine());
                    sw.Write(strB);
                    Console.WriteLine($"Se guardó en {Environment.CurrentDirectory}");
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                finally
                {
                    if(sw!=null)
                    {
                        sw.Dispose();
                    }
                }
                Console.ReadKey();
                   
            }


EJERCICIO 10 ================================================================================================================================================================

class Program1
        {
            static ArrayList listaAutos = new ArrayList();
            static void Main (String[] args)
            {
                
                Boolean finalizar=false;
                while(!finalizar)
                {
                    ImprimirMenuDeOpciones();
                    ConsoleKeyInfo opcion = Console.ReadKey(); 
                    Console.WriteLine();
                    switch(opcion.KeyChar)
                    {
                        case '1': 
                            AgregarAutosListaActual();
                            break;
                        case '2': 
                            CargarEnMemoriaListaDeAutos();
                            break;
                        case '3': 
                            GuardarEnArchivoDeTextoListaActual();
                            break;
                        case '4': 
                            ListarListaActual();
                            break;
                        case '5': 
                            finalizar = true;
                            break;
                        default: 
                            Console.WriteLine("opción invalida");
                            break;
                    }
                }
                
                Console.ReadKey();
                   
            }
            private static void ImprimirMenuDeOpciones()
            {
                Console.WriteLine("Menú de opciones");
                Console.WriteLine("================");
                Console.WriteLine();
                Console.WriteLine("   1. Ingresar autos desde la consola");
                Console.WriteLine("   2. Cargar lista de autos desde el disco");
                Console.WriteLine("   3. Guardar lista de autos en el disco");
                Console.WriteLine("   4. Listar por consola");
                Console.WriteLine("   5. Salir");
                Console.WriteLine();
                Console.WriteLine("Ingrese su opción");

            }

            private static void AgregarAutosListaActual()
            {
                while(true){
                    Console.WriteLine("Ingrese marca");
                    String marca = Console.ReadLine();
                    if(marca == ""){
                        break;
                    }
                    Console.WriteLine("Ingrese modelo");
                    String modelo = Console.ReadLine();
                    listaAutos.Add(new Auto(marca,modelo));
                }
                
            }
        
            private static void CargarEnMemoriaListaDeAutos()
            {
                listaAutos = new ArrayList();

                using(StreamReader sr = new StreamReader("listaAutos.txt"))
                {
                    while(!sr.EndOfStream)
                    {
                        listaAutos.Add(new Auto(sr.ReadLine(),sr.ReadLine()));
                    }
                }

            }
        
            private static void GuardarEnArchivoDeTextoListaActual()
            {
               
               
                    using(StreamWriter sw = new StreamWriter("archivoOpcion3.txt"))
                    {
                             foreach(Auto i in listaAutos)
                             {
                                 sw.WriteLine(i.Marca);
                                 sw.WriteLine(i.Modelo);
                             }
                    }
            }
        
            private static void ListarListaActual()
            {
                foreach(Auto i in listaAutos)
                {
                    Console.WriteLine(i.Marca +"  " + i.Modelo);
                }
            }
        }
        class Auto
        {   
            public String Modelo{get;}
            public String Marca{get;}
           
           public Auto (String marca, String modelo)
           {
               Modelo=modelo;
               Marca=marca;
           }    
        }
           
