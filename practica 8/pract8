EJERCICIO 1 ========================================================================================================================================
class program{
        delegate void Del1(int x);

        delegate void Del2(int[] x);
        delegate int Del3 (int x);

        delegate bool Del4(string st);
        static void Main(string[] args)
        {
            Del1 d1 = delegate (int x) {Console.WriteLine(x);};
            d1(10);

            Del2 d2 = x => Console.WriteLine(x.Length);
            d2(new int[] { 2, 4, 6, 8 });
            Del3 d3 = x =>
            {
                int sum = 0;
                for (int i = 1; i <= x; i++)
                {
                    sum += i;
                }
                return sum;
            };
            Console.WriteLine(d3(10));
            Del4 d4 = new Del4(LongitudPar); //se podria usar la forma reducida =LongitudPar
            Console.WriteLine(d4("hola mundo"));

            Console.ReadKey();
        }
            public static bool LongitudPar(string st)
            {
                 return st.Length % 2 == 0;
            }
 }
EJERCICIO 2 ========================================================================================================================================
delegate void AccionInt(ref int i);
class Program
{
        static void Main(string[] args)
        {
                AccionInt a1 = (ref int i) => i = i * 2;
                a1 += a1; //se encola uno tengo 2 delegates
                a1 += a1; //se encolan 2 y ya tengo 2 entonces ahora tengo 4
                a1 += a1; //se enconlan 4 a los 4 asi que ahora tengo 8
                int i = 1;
                Console.WriteLine(a1(ref i));  //2^8 = 256
                //tengo 8 delegates encolados
                // Responder respecto de este punto en el programa
                Console.ReadKey();
        }
}
EJERCICIO 3 ========================================================================================================================================

static void Main(string[] args)
            {
            int i = 10;
            Action a = delegate ()
            {
              Console.WriteLine(i);
            };

            a.Invoke();
            i = 20;
            a.Invoke();
            Console.ReadKey();
        }
        
        //se pasa una referencia de la variable
EJERCICIO 4 ========================================================================================================================================

        static void Main (String[] args)
            {
                
                Action[] acciones = new Action[10];
                for (int i = 0; i < 10; i++)
                {
                    acciones[i] = () => Console.WriteLine(i + " ");
                }
                foreach (var a in acciones)
                {
                    a.Invoke();
                }
                
                Console.ReadKey();
                   
            }
            //me va a imprimir diez veces 10 ya que el método se queda con la referencia de la variable i
EJERCICIO 5 ========================================================================================================================================
        class Program1
        {
            delegate bool AccionSeleccionar(int i);
            delegate int AccionAplicar(int i);
            delegate int AccionCombinar(int x, int y);
            static ArrayList listaAutos = new ArrayList();
            static void Main (String[] args)
            {
                
                ListaDeEnteros lista1 = new ListaDeEnteros();
                for (int i = 1; i <= 10; i++)
                {
                lista1.Agregar(i);
                }
                foreach (int i in lista1)
                {
                Console.Write(i + "-");
                }
                Console.WriteLine();
                ListaDeEnteros lista2 = lista1.Seleccionar(n => n % 2 == 0);
                ListaDeEnteros lista3 = lista2.Aplicar(n => n * 5);
                ListaDeEnteros lista4 = lista1.Seleccionar(n => n > 7).Aplicar(n => n + 10);
                ListaDeEnteros lista5 = ListaDeEnteros.Combinar(lista3, lista4, (x, y) => x + y);
                lista1.Imprimir();
                lista2.Imprimir();
                lista3.Imprimir();
                lista4.Imprimir();
                lista5.Imprimir();
                ListaDeEnteros.Combinar(lista5, lista3, (x, y) => x + 2 * y).Imprimir();
                
                Console.ReadKey();
            }

            class ListaDeEnteros : IEnumerable
            {
                ArrayList lista = new ArrayList();
                public void Agregar(int i) => lista.Add(i);
                public int Cantidad => lista.Count;
                
                public IEnumerator GetEnumerator()
                {
                    return lista.GetEnumerator(); //aprovechando que ArrayList ya implementa la interfaz
                }

                public void Imprimir()
                {
                    foreach(int i in lista)
                    {
                        Console.Write(i + " - ");
                    }
                    Console.WriteLine();
                }
                public ListaDeEnteros Seleccionar (AccionSeleccionar a)
                {
                    ListaDeEnteros listaNueva = new ListaDeEnteros();
                    foreach(int i in lista)
                    {
                        if(a(i))
                        {
                            listaNueva.Agregar(i);
                        }
                    }
                    return listaNueva;
                }
                public ListaDeEnteros Aplicar(AccionAplicar a)
                {
                    ListaDeEnteros listaNueva = new ListaDeEnteros();
                    foreach(int i in lista)
                    {
                        listaNueva.Agregar(a(i));
                    }
                    return listaNueva;
                }

                public static ListaDeEnteros Combinar(ListaDeEnteros l1, ListaDeEnteros l2,AccionCombinar a)
                {
                        ListaDeEnteros listaMasCorta,listaMasLarga;
                        ListaDeEnteros listaNueva=new ListaDeEnteros();
                        if(l1.Cantidad < l2.Cantidad)
                        {
                            listaMasCorta= l1;
                            listaMasLarga= l2;
                        }
                        else
                        {
                            listaMasCorta=l2;
                            listaMasLarga= l1; 
                        }

                        IEnumerator elistaLarga=listaMasLarga.GetEnumerator();
                        IEnumerator elistaCorta=listaMasCorta.GetEnumerator();
                        int i;
                        for(i=0;i<listaMasCorta.Cantidad;i++)
                        {   
                            elistaCorta.MoveNext();
                            elistaLarga.MoveNext();
                            listaNueva.Agregar(a((int)elistaLarga.Current,(int)elistaCorta.Current));
                            
                        }
                        for(int k=i;k<listaMasLarga.Cantidad;k++)
                        {
                            elistaLarga.MoveNext();
                            listaNueva.Agregar((int)elistaLarga.Current);
                        }
                        elistaCorta.Reset();
                        elistaLarga.Reset();
                        
                        return listaNueva;
                }

            }

            
            
        }
EJERCICIO 6 ========================================================================================================================================
        b) Se inició el trabajo
           Trabajo concluido
           
         c) da error ya que el delegado eventHandler no tiene ningún valor
         
                public void Trabajar()
                {
                    Trabajando= T1Trabajando;   //asignamos el delegado adentro del método
                    Trabajando(this, EventArgs.Empty);
                    //realiza algún trabajo
                    Console.WriteLine("Trabajo concluido");
                }
          d) 
                  static void Main(string[] args)
                    {
                        Trabajador t1 = new Trabajador();
                   --   t1.Trabajando = (sender, e) => Console.WriteLine("Se inició el trabajo"); 
                        t1.Trabajar();
                        Console.ReadKey();
                    }
          e)
          
                static void Main(string[] args)
            {
                Trabajador t1 = new Trabajador();
                t1.Trabajando += (sender, e) => Console.WriteLine("Se inició el trabajo");  // al usar event me obliga a usar =+
                t1.Trabajar();
                Console.ReadKey();
            }
            public static void T1Trabajando(object sender, EventArgs e)
                => Console.WriteLine("Se inició el trabajo");
            class Trabajador
            {
                public event EventHandler Trabajando; //No es necesario definir un tipo delegado propio //cambiamos por event
                //porque la plataforma provee el tipo EventHandler
                //que se adecua a lo que se necesita

                public void Trabajar()
                {
                    
                    Trabajando(this, EventArgs.Empty);
                    //realiza algún trabajo
                    Console.WriteLine("Trabajo concluido");
                }
            }
            
           f)
                
                static void Main(string[] args)
            {
                Trabajador t1 = new Trabajador();
                t1.Trabajando += (sender, e) => Console.WriteLine("Se inició el trabajo"); 
                Console.ReadKey();
            }
            public static void T1Trabajando(object sender, EventArgs e)
                => Console.WriteLine("Se inició el trabajo");
            class Trabajador
            {
                private EventHandler _Trabajando;
                public event EventHandler Trabajando
                {
                    add
                    {
                        _Trabajando+=value;
                        Trabajar();
                    }
                    remove
                    {
                        _Trabajando-=value;
                    }
                }
                

                public void Trabajar()
                {
                    
                    _Trabajando(this, EventArgs.Empty);
                    //realiza algún trabajo
                    Console.WriteLine("Trabajo concluido");
                }
            }
            
            
        }
EJERCICIO 7 ========================================================================================================================================
        
         class Program
            {
                static void Main()
                {
                ContadorDeLineas contador = new ContadorDeLineas();
                contador.Contar();
                }
            }
            class ContadorDeLineas
            {
                private int _cantLineas = 0;
                public void Contar()
                {
                Ingresador _ingresador = new Ingresador();
                _ingresador.OtraLinea +=UnaLineaMas; //me suscribo al evento de la clase Ingresador
                _ingresador.Ingresar();
                Console.WriteLine($"Cantidad de líneas ingresadas: {_cantLineas}");

                }
                public void UnaLineaMas(object sender,EventArgs e) => _cantLineas++;

            }
            class Ingresador
            {
                private EventHandler _otraLinea;
                public event EventHandler OtraLinea
                {
                    add
                    {
                        _otraLinea += value;
                    }
                    remove
                    {
                        _otraLinea -= value;
                    }
                }
                public void Ingresar()
                {
                    string st = Console.ReadLine();
                    while (st != "")
                    {
                        _otraLinea(this,new EventArgs()); //cada vez que escribo algo por consola se genera un evento al cual la clase ContadorDeLineas está suscripto
                        st = Console.ReadLine();
                    }
                }
            }
EJERCICIO 8 ========================================================================================================================================

        class Program
            {
                static void Main()
                {
                    Ingresador ingresador = new Ingresador();
                    ingresador.EspacioLeido += (sender, e) =>
                    { Console.WriteLine("Se ingresó una línea en blanco"); };
                    ingresador.NumeroLeido += (sender, e) =>
                    { Console.WriteLine($"Se ingresó el número {e.Valor}"); };
                    ingresador.Ingresar();
                }

                
            }
            public class NumeroLeidoEventArgs : EventArgs
            {
                    public int Valor { get; set; }
            }

            delegate void NumeroLeidoEventHandler(object sender, NumeroLeidoEventArgs e);
            class Ingresador
            {

                    private NumeroLeidoEventHandler _numeroLeido;
                    public event NumeroLeidoEventHandler NumeroLeido
                    {
                        add
                        {
                            _numeroLeido+=value;
                        }
                        remove
                        {
                            _numeroLeido-=value;
                        }
                    }

                    private EventHandler _espacioLeido;
                    public event EventHandler EspacioLeido
                    {
                        add
                        {
                            _espacioLeido+=value;
                        }
                        remove
                        {
                            _espacioLeido-=value;
                        }
                    }
                    public void Ingresar()
                    {
                      
                        String str = Console.ReadLine();
                        while(str != "fin")
                        {
                            str = Console.ReadLine();
                            if(str == "")
                            {
                                _espacioLeido(this,new EventArgs());
                            }
                            if(int.TryParse(str,out int i)){

                                _numeroLeido(this,new NumeroLeidoEventArgs(){Valor=i});
                            }
                            
                        }    
                    }
        }
EJERCICIO 9 ========================================================================================================================================

        class Program
            {
                static void Main()
                {
                    Temporizador t = new Temporizador();
                    t.Tic += (sender, e) =>
                    {
                    Console.Write(DateTime.Now.ToString("HH:mm:ss") + " ");
                    if (e.Tics == 5)
                    {
                    t.Habilitado = false;
                    }
                    };
                    t.Intervalo = 2000;
                    t.Habilitado = true;
                    Console.WriteLine();
                    t.Intervalo = 1000;
                    t.Habilitado = true;

                    Console.ReadKey();
                }

                
            }

            public class TicEventArgs : EventArgs
            {
                    public int Tics { get; set; }
            }

            delegate void TicEventHandler(object sender, TicEventArgs e);

            class Temporizador
            {
                private TicEventHandler _tic;
                public event TicEventHandler Tic
                {
                    add
                    {
                        _tic+=value;
                    }
                    remove
                    {
                        _tic-=value;
                    }
                }
                private int _intervalo;

                private bool _habilitado=false;

            
                public int Intervalo{
                    get
                    {
                        return this._intervalo;
                    }
                    set
                    { 
                        if(value>=100)
                        {
                            this._intervalo=value;
                        }
                    }
                }
               
                public bool Habilitado 
                {
                    get
                    {
                        return this._habilitado;
                    }
                    set 
                    {
                        if(value == false)
                        {
                             this._habilitado=value;
                        }
                         else
                        if(this._tic != null)
                        {
                            this._habilitado=value;
                            TicTock();
                        }
                    }
                }

               
                public void TicTock()
                {
                    int tics = 0;
                    while(_habilitado){

                        Thread.Sleep(_intervalo); 

                        if(_tic!= null)
                        {
                            _tic(this,new TicEventArgs(){Tics=tics});
                        }
                        tics++;
                    }
                   

                }
            }
EJERCICIO 10 =======================================================================================================================================


        class Program
            {
                static void Main()
                {
                    Articulo a = new Articulo();
                    a.PrecioCambiado += precioCambiado;
                    a.Codigo = 1;
                    a.Precio = 10;
                    a.Precio = 12;
                    a.Precio = 12;
                    a.Precio = 14;

                    Console.ReadKey();
                }

                public static void precioCambiado(object sender, PrecioCambiadoEventArgs e)
                {
                string texto = $"Artículo {e.Codigo} valía {e.PrecioAnterior}";
                texto += $" y ahora vale {e.PrecioNuevo}";
                Console.WriteLine(texto);
                }

                
            }
            class PrecioCambiadoEventArgs : EventArgs //agregamos esta clase ya que queremos pasar informacion mediante el evento
            {

                public int Codigo {get;set;}
                public double PrecioNuevo{get;set;}
                public double PrecioAnterior{get;set;}

            }
            delegate void PrecioCambiadoEventHandler (object sender, PrecioCambiadoEventArgs e); //declaramos nuestro delegado por el cual podemos enviar informacion

    	    class Articulo
            {
                private double _Precio=0;
                public double Precio
                {
                    set
                    {
                         _precioCambiado(this,new PrecioCambiadoEventArgs(){Codigo=this.Codigo,PrecioAnterior=this._Precio,PrecioNuevo=value});
                        _Precio = value;
                    }
                    get
                    {
                        return _Precio;
                    }
                }
                public int Codigo{set;get;}

                private PrecioCambiadoEventHandler _precioCambiado;

                public event PrecioCambiadoEventHandler PrecioCambiado
                {
                    add
                    {
                        this._precioCambiado += value;
                    }
                    remove
                    {
                        this._precioCambiado-=value;
                    }
                }
            }
====================================================================================================================================================================
