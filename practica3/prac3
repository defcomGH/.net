
EJERCICIO 01
============
static void Main(string[] args)
{
Console.CursorVisible = false;
ConsoleKeyInfo k = Console.ReadKey(true);
while (k.Key != ConsoleKey.End)
{
Console.Clear();
Console.Write($"{k.Modifiers}-{k.Key}-{k.KeyChar}");
k = Console.ReadKey(true);
}
}            
*/

        /*
        EJERCICIO 02
        ============
        static void Main(string[] args)
        {
            double[,] mat = new double[4, 4];
            for (int i = 0; i <= 15; i++)
            {
                mat[i / 4, i % 4] = i;
            }
            ImprimirMatriz(mat);
        }
        static void ImprimirMatriz(double[,] matriz)
        {
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    Console.Write($"{matriz[i,j], 3}");
                }
                Console.WriteLine();
            }
        }
        */

        /*
        EJERCICIO 03
        ============
        static void Main(string[] args)
        {
            double[,] mat = new double[4, 4];
            string format = "0.0";
            for (int i = 0; i <= 15; i++)
            {
                mat[i / 4, i % 4] = i;
            }
            ImprimirMatriz(mat, format);
        }
        static void ImprimirMatriz(double[,] matriz, string formatString)
        {
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    Console.Write($"{matriz[i, j].ToString(formatString),5}");
                }
                Console.WriteLine();
            }
        }
        
        */

        /*
        EJERCICIO 04
        ============
        static void Main(string[] args)
        {
            double[,] mat = generadorDeMatrices(4,4);
            try{
                ImprimirMatriz(mat);
                ImprimirDiagonal(GetDiagonalSecundaria(mat), "Diagonal principal: ");
                ImprimirDiagonal(GetDiagonalSecundaria(mat), "Diagonal secundaria: ");
            }catch (ArgumentException e){
                Console.WriteLine(e.Message);
            }
        }
        static double[,] generadorDeMatrices(int a, int b){
            double[,] mat = new double[a, b];
            for (int i = 0; i <= ((a*b)-1); i++)
            {
                mat[i / b, i % b] = i;
            }
            return mat;
        }
        static double[] GetDiagonalPrincipal(double[,] matriz)
        {
            checkSquare(matriz);
            double[] diag = new double[matriz.GetLength(0)];
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                diag[i] = matriz[i,i];
            }
            return diag;
        }
        static double[] GetDiagonalSecundaria(double[,] matriz)
        {
            checkSquare(matriz);
            int dimension = matriz.GetLength(0) - 1;
            double[] diag = new double[dimension];
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                diag[i] = matriz[i, dimension-i];
            }
            return diag;
        }
        static double[] GetDiagonal(double[,] matriz, bool principal)
        {
            checkSquare(matriz);
            int dimension = matriz.GetLength(0) - 1;
            double[] diag = new double[dimension];
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                diag[i] = matriz[i, principal ? i : dimension-i];
            }
            return diag;
        }
        static void checkSquare(double[,] matriz){
            if(matriz.GetLength(0)!=matriz.GetLength(1)){
                throw new ArgumentException("La matriz no es cuadrada");
            }
            return;
        }
         static void ImprimirMatriz(double[,] matriz)
        {
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    Console.Write($"{matriz[i, j],5}");
                }
                Console.WriteLine();
            }
        }
          static void ImprimirDiagonal(double[] diag, string texto)
        {
            Console.WriteLine();
            Console.WriteLine(texto);
            for (int i = 0; i < diag.Length; i++)
            {
                    Console.Write($"{diag[i],5}");
            }
            Console.WriteLine();
        }       
        */

        /*
        EJERCICIO 05
        ============
        
                static void Main(string[] args)
        {
            double[,] mat = generadorDeMatrices(4,4);
            Console.WriteLine("Matriz original: ");
            ImprimirMatriz(mat);
            Console.WriteLine();
            Console.WriteLine("Array de arrays: ");
            ImprimirArrayDeArrays(GetArregloDeArreglo(mat));
        }
        static double[,] generadorDeMatrices(int a, int b){
            double[,] mat = new double[a, b];
            for (int i = 0; i <= ((a*b)-1); i++)
            {
                mat[i / b, i % b] = i;
            }
            return mat;
        }
        static double[][] GetArregloDeArreglo(double [,] matriz){
            double[][] newMat = new double[matriz.GetLength(1)][];
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                newMat[i] = new double[matriz.GetLength(0)];
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    newMat[i][j] = matriz[i,j];
                }
            }
            return newMat;
        }
        static void ImprimirMatriz(double[,] matriz)
        {
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    Console.Write($"{matriz[i, j],5}");
                }
                Console.WriteLine();
            }
        }
        static void ImprimirArrayDeArrays(double[][] matriz)
        {
            for (int i = 0; i < matriz.Length; i++)
            {
                for (int j = 0; j < matriz[i].Length; j++)
                {
                    Console.Write($"{matriz[i][j],5}");
                }
                Console.WriteLine();
            }
        }


        EJERCICIO 06
        ============

          //suma
        static double[,] SumarMatrices(double [,] m1,double [,] m2){
                    if((m1.GetLength(0)== m1.GetLength(0))&& (m2.GetLength(1) ==m2.GetLength(1))) {
                        double[,] suma= new double[m1.GetLength(0),m1.GetLength(1)];
                        for (int i=0;i<m1.GetLength(0);i++){
                            for(int j=0; j<m1.GetLength(1);j++){
                                suma[i,j]= m1[i,j] + m2[i,j];
                            }
                        }
                        return suma;
                    }
                    return null;
                }



         // resta 

         static double[,] RestarMatrices(double [,] m1,double [,] m2){
                    if((m1.GetLength(0)== m1.GetLength(0))&& (m2.GetLength(1) ==m2.GetLength(1))) {
                        double[,] suma= new double[m1.GetLength(0),m1.GetLength(1)];
                        for (int i=0;i<m1.GetLength(0);i++){
                            for(int j=0; j<m1.GetLength(1);j++){
                                suma[i,j]= m1[i,j] - m2[i,j];
                            }
                        }
                        return suma;
                    }
                    return null;
                }



          
        EJERCICIO 9
        ============
        
        object obj = new int[10];
            dynamic dyn = 13;

            int[] x = (int[])obj;

            Console.WriteLine(x.Length); //tira error de compilación puede el tipo objet no tiene definido el método lengt debo de castear el tipo
            Console.WriteLine(dyn.Length); // igual pero tira un error de ejecución ya que el compilador no sabe que tipo va a tomar dyn ya que es una variable dinamica

            Console.ReadKey();
            
            
            
        EJERCICIO 10
        ============
        
        static void Main(string[] args)
        {
            double a = 1.163852;
            
            Console.WriteLine("Numero a: {0:0.0}", a);      // => Numero a: 1,2
            Console.WriteLine("Numero a: {0:0.00}", a);     // => Numero a: 1,16
            Console.WriteLine("Numero a: {0:0.000}", a);    // => Numero a: 1,164
            Console.WriteLine("Numero a: {0:0.0000}", a);   // => Numero a: 1,1639
            Console.WriteLine("Numero a: {0:0.00000}", a);  // => Numero a: 1,16385
            Console.WriteLine($"Numero a: {a:0.0}");        // => Numero a: 1,2
            Console.WriteLine($"Numero a: {a:0.00}");       // => Numero a: 1,16
            Console.WriteLine($"Numero a: {a:0.000}");      // => Numero a: 1,164
            Console.WriteLine($"Numero a: {a:0.0000}");     // => Numero a: 1,1639
            Console.WriteLine($"Numero a: {a:0.00000}");    // => Numero a: 1,16385
        }
        
        EJERCICIO 11
        ============
        
        
        ArrayList a = new ArrayList() {1,2,3,4};
            a.Remove(5); // no tira error solo no encuentro el elemento 5
            a.RemoveAt(5); // tira error de ejecución ya que indexa una posicion que está fuera del arayList
            
        
        
        EJERCICIO 12 
        ============
       static StringBuilder cifrar (StringBuilder mensaje, ref Queue c){
            StringBuilder str = new StringBuilder();
            int aux;
            for(int i=0;i<mensaje.Length;i++){
                    aux= (int)c.Dequeue();                              //desencolo un elemento de la cola 
                    str.Append(CifrarCaracter(mensaje[i],(char)aux));   //cifro un caracter de mi string con el elemento de la cola y lo agrego a un StringBuilder
                    c.Enqueue(aux);                                     //vuelvo a encolar para poder usar la cola de forma repetitiva
            }
            
            return str;
        }
        static StringBuilder descifrar(StringBuilder mensaje, ref Queue c){
            StringBuilder str = new StringBuilder();
            int aux;
            for(int i=0;i<mensaje.Length;i++){
                aux= (int)c.Dequeue();                          //desencolo un elemento de la cola
                str.Append(descifrarCaracter(mensaje[i],aux));  //descifro un caracter de mi string con el elemento de la cola y lo agrego a un StringBuilder
                c.Enqueue(aux);                                 //vuelvo a encolar para poder usar la cola de forma repetitiva
            }
            return str;
        }
        static char CifrarCaracter (char car,int sum){
            int a;

            a = getIntRepresentation(car);  //el ejercicio lo hice acorde a la tabla de ejemplo. La funcion getIntRepresentation me devuelve el numero correspondiente a la tabla

            if(a + sum <= 28){                  //si sumo este numero con el desplazamiento y no me da mayor a 28 lo puedo devolver sin problemas
                return getCharRepresentation(a+sum);    //retorno el Char correspondiente a la tabla ejemplo
            }
            else{
                return getCharRepresentation(a+sum-28); //en cambio si a+ sum > 28 debo de empezar a contar desde el principio de la tabla
            }
        }        
        static char descifrarCaracter (char c,int sum){
            int a=getIntRepresentation(c);

            if (a-sum > 0){
                return getCharRepresentation(a-sum);
            }
            else{
                return getCharRepresentation(a-sum+28);
            }
        }
            
                
           
       
        static int getIntRepresentation(char c){
            if(c == ' ')
                return 28;
            if(c== 'Ñ'){
                return 15;
            }
            if((int)c -64 < 15){
                return (int)c -64;
            }
           
                return (int)c -63;
            

        }
        static char getCharRepresentation(int n){
            if(n == 28)
                return ' ';
            if(n==15){
                return 'Ñ';
            }
            if(n<15){
              return (char)(n+64);  
            }
               return (char)(n+63);
                
        }
        static void Main(string[] args)
        
        {
            StringBuilder str = new StringBuilder("HOLA MUNDO"); //seguí el ejemplo de la practica solo funciona con mayúsculas
            Console.WriteLine(str);
            Queue c =  new Queue();
            c.Enqueue(5);
            c.Enqueue(3);
            c.Enqueue(9);
            c.Enqueue(7);
            str=cifrar(str,ref c); 
            Console.WriteLine(str);
            c =  new Queue();
            c.Enqueue(5);
            c.Enqueue(3);
            c.Enqueue(9);
            c.Enqueue(7);

            str=descifrar(str,ref c);

            Console.WriteLine(str);

            Console.ReadKey();
        }
        
        
        EJERCICIO 13
        ============\
        
        
        static Boolean verificarExpresion(string str){
            Stack p= new Stack();
            for (int i=0;i<str.Length;i++){
                 if(str[i]== '(') {
                     p.Push(str[i]);
                 }
                 if(str[i]== ')'){
                     if(p.Count != 0){
                         p.Pop();
                     }
                     else
                     {
                         return false;
                     }
                 }
            }
            if(p.Count == 0) {
                return true;
            }
            else{
                return false;
            }
        }
        static void Main(string[] args)
        
        {
            Stack pila = new Stack();
            string expresion= "(a+b*(c))";
            Console.WriteLine(verificarExpresion(expresion));
            Console.ReadKey();
        }
        
        
        EJERCICIO 14
        ============
        
        
        
         static void Main(string[] args)
        
        {
            Stack c = new Stack ();

            int num = 35;

            while(num > 0){
                c.Push(num % 2);
                num = num / 2;
            }

            while (c.Count !=0) 
            {
                Console.WriteLine(c.Pop());
            }


            Console.ReadKey();
        }
            
         EJERCICIO 15
         ============
         
         
         static void Main()
                {
                int x = 0;
                try
                {
                Console.WriteLine(1.0 / x); // no genera ninguna excepcion ya que en c# al dividi run numero real por cero nos da infinito
                Console.WriteLine(1 / x); // genera una excepcion ya que en c# no puedo dividir un entero por cero
                Console.WriteLine("todo OK");
                }
                catch (Exception e)
                {
                Console.WriteLine(e.Message);
                }
                }
            
         EJERCICIO 16 
         ============
         
         static void Main(string[] args)
        {
            
            String str;
            str=Console.ReadLine();
            while(str != ""){
                try{
                    for(int i=0;i<str.Length;i++){
                        int aux =(int)str[i];
                        if ((48 > (int)str[i]) || (57 < (int)str[i])){
                            throw(new ArgumentException());
                        }             
                    }
                    Console.WriteLine("NUMERO VALIDO");
                }
                catch
                {
                    Console.WriteLine("NUMERO INVALIDO");
                }
                str=Console.ReadLine(); 
            }

            Console.ReadKey();

            
        }
