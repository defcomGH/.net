EJERCICIO 1 =========================================================================================================================================================

class Program1
        {
            
            static void Main() {
                Cuenta c1 = new Cuenta();
                c1.Depositar(100).Depositar(50).Extraer(120).Extraer(50);
                Cuenta c2 = new Cuenta();
                c2.Depositar(200).Depositar(800);
                new Cuenta().Depositar(20).Extraer(20);
                c2.Extraer(1000).Extraer(1);
                Console.WriteLine("\nDETALLE");
                Cuenta.ImprimirDetalle();
                Console.ReadKey();
             
            }

            class Cuenta {
                double monto;   
                static int contadorID = 1; 

                static int depositos = 0;
                static double totalDepositado=0;
                static int extracciones = 0;

                static int faltaFondos = 0;

                static double totalExtraido = 0;
                int id;


                public Cuenta (){
                   
                    this.monto=0;
                    this.id= Cuenta.contadorID++;
                    Console.WriteLine($"Se creó la cuenta ID = {this.id}");
                }
                public Cuenta Depositar(double n){
                    Cuenta.depositos++;
                    Cuenta.totalDepositado+=n;
                    monto+= n;
                    Console.WriteLine($"Se depositó {n} en la cuenta {this.id}  (Saldo = {this.monto})");
                    return this;
                }
                public Cuenta Extraer(double n){
                    if(this.monto - n >= 0){
                        Cuenta.extracciones++;
                        Cuenta.totalExtraido+=n;
                        this.monto-=n;
                        Console.WriteLine($"Se extrajo {n} de la cuenta {this.id}");
                    }
                    else{
                        Console.WriteLine("Operación denegada. Saldo inuficiente");
                        Cuenta.faltaFondos++;
                    }
                    return this;
                }

                public static void ImprimirDetalle(){
                    Console.WriteLine("DETALLE");
                    Console.WriteLine($"CUENTAS CREADAS: {Cuenta.contadorID - 1} {'\n'}DEPÓSITOS: {Cuenta.depositos} - Total depositado: {Cuenta.totalDepositado}");
                    Console.WriteLine($"EXTRACCIONES: {Cuenta.extracciones} - Total extraído {Cuenta.totalExtraido}");
                    Console.WriteLine($"                        Saldo: {Cuenta.totalDepositado - Cuenta.totalExtraido}"); 
                    Console.WriteLine($"Se denegaron {Cuenta.faltaFondos} extracciones por falta de fondos");
                }
           }

            
            

        }
        
       
       EJERCICIO 2 ===========================================================================================================================
       
       
       using System;
using System.Text;
using System.Diagnostics;
using System.Collections;
//using System.Threading;
namespace teoria1
{
    
        class Program1
        {
            
             static void Main() {
                new Cuenta();
                new Cuenta();
                ArrayList cuentas = Cuenta.GetCuentas();
                // se recuperó la lista de cuentas creadas
                (cuentas[0] as Cuenta).Depositar(50);
                // se depositó 50 en la primera cuenta de la lista devuelta
                cuentas.RemoveAt(0);
                Console.WriteLine(cuentas.Count);
                // se borró un elemento de la lista devuelta
                // pero la clase Cuenta sigue manteniendo todos
                // los datos "La cuenta id: 1 tiene 50 de saldo"
                cuentas = Cuenta.GetCuentas();
                Console.WriteLine(cuentas.Count);
                // se recupera nuevamente la lista de cuentas
                (cuentas[0] as Cuenta).Extraer(30);
                //se extrae 25 de la cuenta id: 1 que tenía 50 de saldo
                Console.ReadKey();
            }

            class Cuenta {
                double monto;   
                static int contadorID = 1; 

                static int depositos = 0;
                static double totalDepositado=0;
                static int extracciones = 0;

                static int faltaFondos = 0;

                static double totalExtraido = 0;
                int id;

                static ArrayList listaCuentas = new ArrayList();



                public Cuenta (){
                   
                    this.monto=0;
                    this.id= Cuenta.contadorID++;
                    Console.WriteLine($"Se creó la cuenta ID = {this.id}");
                    listaCuentas.Add(this);
                }
                public Cuenta Depositar(double n){
                    Cuenta.depositos++;
                    Cuenta.totalDepositado+=n;
                    monto+= n;
                    Console.WriteLine($"Se depositó {n} en la cuenta {this.id}  (Saldo = {this.monto})");
                    return this;
                }
                public Cuenta Extraer(double n){
                    if(this.monto - n >= 0){
                        Cuenta.extracciones++;
                        Cuenta.totalExtraido+=n;
                        this.monto-=n;
                        Console.WriteLine($"Se extrajo {n} de la cuenta {this.id}");
                    }
                    else{
                        Console.WriteLine("Operación denegada. Saldo inuficiente");
                        Cuenta.faltaFondos++;
                    }
                    return this;
                }
                public static ArrayList GetCuentas() {
                    ArrayList aux1 = new ArrayList();
                    foreach(Cuenta item in Cuenta.listaCuentas){
                        aux1.Add(item);
                    }
                    return aux1;
                    
                } 
                public static void ImprimirDetalle(){
                    Console.WriteLine("DETALLE");
                    Console.WriteLine($"CUENTAS CREADAS: {Cuenta.contadorID - 1} {'\n'}DEPÓSITOS: {Cuenta.depositos} - Total depositado: {Cuenta.totalDepositado}");
                    Console.WriteLine($"EXTRACCIONES: {Cuenta.extracciones} - Total extraído {Cuenta.totalExtraido}");
                    Console.WriteLine($"                        Saldo: {Cuenta.totalDepositado - Cuenta.totalExtraido}"); 
                    Console.WriteLine($"Se denegaron {Cuenta.faltaFondos} extracciones por falta de fondos");
                }

                
           }
        }
}




       EJERCICIO 3 ===========================================================================================================================
       
       
       
       using System;
using System.Text;
using System.Diagnostics;
using System.Collections;
//using System.Threading;
namespace teoria1
{
    
        class Program1
        {
            
             static void Main() {
                new Cuenta();
                new Cuenta();
                ArrayList cuentas = Cuenta.Cuentas;
                // se recuperó la lista de cuentas creadas
                (cuentas[0] as Cuenta).Depositar(50);
                // se depositó 50 en la primera cuenta de la lista devuelta
                cuentas.RemoveAt(0);
                Console.WriteLine(cuentas.Count);
                // se borró un elemento de la lista devuelta
                // pero la clase Cuenta sigue manteniendo todos
                // los datos "La cuenta id: 1 tiene 50 de saldo"
                cuentas = Cuenta.Cuentas;
                Console.WriteLine(cuentas.Count);
                // se recupera nuevamente la lista de cuentas
                (cuentas[0] as Cuenta).Extraer(30);
                //se extrae 25 de la cuenta id: 1 que tenía 50 de saldo
                Console.ReadKey();
            }

            class Cuenta {
                double monto;   
                static int contadorID = 1; 

                static int depositos = 0;
                static double totalDepositado=0;
                static int extracciones = 0;

                static int faltaFondos = 0;

                static double totalExtraido = 0;
                int id;

                private static ArrayList listaCuentas = new ArrayList();

                
                public static ArrayList Cuentas {
                get {
                ArrayList aux1 = new ArrayList();
                            foreach(Cuenta item in Cuenta.listaCuentas){
                                aux1.Add(item);
                            }
                            return aux1;
                }
             
                }


                public Cuenta (){
                   
                    this.monto=0;
                    this.id= Cuenta.contadorID++;
                    Console.WriteLine($"Se creó la cuenta ID = {this.id}");
                    listaCuentas.Add(this);
                }
                public Cuenta Depositar(double n){
                    Cuenta.depositos++;
                    Cuenta.totalDepositado+=n;
                    monto+= n;
                    Console.WriteLine($"Se depositó {n} en la cuenta {this.id}  (Saldo = {this.monto})");
                    return this;
                }
                public Cuenta Extraer(double n){
                    if(this.monto - n >= 0){
                        Cuenta.extracciones++;
                        Cuenta.totalExtraido+=n;
                        this.monto-=n;
                        Console.WriteLine($"Se extrajo {n} de la cuenta {this.id}");
                    }
                    else{
                        Console.WriteLine("Operación denegada. Saldo inuficiente");
                        Cuenta.faltaFondos++;
                    }
                    return this;
                }



                public static void ImprimirDetalle(){
                    Console.WriteLine("DETALLE");
                    Console.WriteLine($"CUENTAS CREADAS: {Cuenta.contadorID - 1} {'\n'}DEPÓSITOS: {Cuenta.depositos} - Total depositado: {Cuenta.totalDepositado}");
                    Console.WriteLine($"EXTRACCIONES: {Cuenta.extracciones} - Total extraído {Cuenta.totalExtraido}");
                    Console.WriteLine($"                        Saldo: {Cuenta.totalDepositado - Cuenta.totalExtraido}"); 
                    Console.WriteLine($"Se denegaron {Cuenta.faltaFondos} extracciones por falta de fondos");
                }

                
           }
        }
}


EJERCICIO  6   ============================================================================================================================================================




    static void Main(string[] args)
        
        {
            Matriz A = new Matriz(2, 3);
            for (int i = 0; i < 6; i++) A.SetElemento(i / 3, i % 3, (i + 1) / 3.0);
            Console.WriteLine("Impresión de la matriz A");
            A.Imprimir("0.000");
            double[,] aux = new double[,] { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
            Matriz B = new Matriz(aux);
            Console.WriteLine("\nImpresión de la matriz B");
            B.Imprimir();
            Console.WriteLine("\nAcceso al elemento B[1,2]={0}", B[1,2]);
            Console.Write("\nfila 1 de A: ");
            foreach (double d in A.GetFila(1)) Console.Write("{0:0.0} ", d);
            Console.Write("\n\nColumna 0 de B: ");
            foreach (double d in B.GetColumna(0)) Console.Write("{0} ", d);
            Console.Write("\n\nDiagonal principal de B: ");
            foreach (double d in B.DiagonalPrincipal) Console.Write("{0} ", d);
            Console.Write("\n\nDiagonal secundaria de B: ");
            foreach (double d in B.DiagonalSecundaria) Console.Write("{0} ", d);
            A.MultiplicarPor(B);
            Console.WriteLine("\n\nA multiplicado por B");
            A.Imprimir();

            Console.ReadKey();
        }
        }

        class Matriz {
            
           double[,] matriz;
            public Matriz(int filas, int columnas){
                this.matriz = new double [filas,columnas];
            }
            public Matriz (double[,] matriz){
                
                this.matriz=matriz; //se usa la misma matriz que en el programa principal no se instancia otra diferente debo tener cuidado de no modificar la matriz en el programa principal ya que los cambios tambien se verán reflejados dentro de mi clase matriz
            }

            public bool SetElemento(int fila, int columna, double elemento){
                if((fila < matriz.GetLength(0) ) && (columna < matriz.GetLength(1)))
                {
                    this.matriz[fila,columna]= elemento;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public double this[int fila,int columna]{
                    get{
                         return this.matriz[fila,columna];
                    }
                    set{
                            this.matriz[fila,columna]=value;
                    }
            }


            public void Imprimir(){
                for(int i=0;i<matriz.GetLength(0);i++){
                    for(int j=0;j<matriz.GetLength(1);j++){
                        Console.Write(matriz[i,j]);
                        Console.Write("\t");
                    }
                    Console.WriteLine();
                }
            }

            public void Imprimir(string formatString){
                for(int i=0;i<matriz.GetLength(0);i++){
                    for(int j=0;j<matriz.GetLength(1);j++){
                        Console.Write(matriz[i, j].ToString(formatString));
                        Console.Write("\t"); 
                    }
                    Console.WriteLine();
                }
            }
            public double[] GetFila(int fila){
                double[] vectorFila=null;
                if(fila < matriz.GetLength(0)) {
                        vectorFila = new double[matriz.GetLength(1)];
                        for(int i=0;i<matriz.GetLength(1);i++){
                            vectorFila[i]= matriz[fila,i];
                        }
                    }
                    return vectorFila;

            }

            public double[] GetColumna(int columna){
                double[] vectorColumna = null;
                if(columna < matriz.GetLength(1)){
                    vectorColumna = new double[matriz.GetLength(0)];
                    for(int i=0;i<matriz.GetLength(0);i++){
                        vectorColumna[i]= matriz[i,columna];
                    }
                }
                return vectorColumna;
            }


            public double[] DiagonalPrincipal{
                get
                {
                        double[] vectorDiagonalPrincipal = null;
                        if(matriz.GetLength(0) == matriz.GetLength(1))
                        {
                            vectorDiagonalPrincipal = new double[matriz.GetLength(0)];
                            for(int i=0; i< matriz.GetLength(0);i++)
                            {
                                vectorDiagonalPrincipal[i]= matriz[i,i];
                            }
                        }
                        return vectorDiagonalPrincipal;
                }
                
            }

            public double[] DiagonalSecundaria{
            get
            {
                    double[] vectorDiagonalSecundaria = null;
                    if(matriz.GetLength(0) == matriz.GetLength(1))
                    {
                        vectorDiagonalSecundaria = new double[matriz.GetLength(0)];
                        for(int i=0; i< matriz.GetLength(0);i++)
                        {
                            vectorDiagonalSecundaria[i]= matriz[i,matriz.GetLength(0) -1 -i];
                        }
                    }
                    return vectorDiagonalSecundaria;
            }
                
            }

            public double[][] GetArregloDeArreglo (){
                double[][] arregloDeArreglo=new double[matriz.GetLength(0)][];
                for (int f=0;f<matriz.GetLength(0);f++){
                    arregloDeArreglo[f]= new double[matriz.GetLength(1)];
                }
                for(int i=0;i<matriz.GetLength(0);i++){
                    for(int j=0;j< matriz.GetLength(1);j++){
                        arregloDeArreglo[i][j]=matriz[i,j];
                    }
                }
                return arregloDeArreglo;

            }

            public bool Sumarle (Matriz m){
                if((m.GetFila(0).Length == this.matriz.GetLength(1)) && (m.GetColumna(0).Length == this.matriz.GetLength(0)))
                {
                    for(int i=0; i< this.matriz.GetLength(0);i++){
                        for(int j=0;j<matriz.GetLength(1);j++){
                            this.matriz[i,j]+= (double)m[i,j];
                        }
                    }
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public bool Restarle (Matriz m){
                if((m.GetFila(0).Length == this.matriz.GetLength(1)) && (m.GetColumna(0).Length == this.matriz.GetLength(0)))
                {
                    for(int i=0; i< this.matriz.GetLength(0);i++){
                        for(int j=0;j<matriz.GetLength(1);j++){
                            this.matriz[i,j]-= (double)m[i,j];
                        }
                    }
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public void MultiplicarPor(Matriz m){
                
                if(this.matriz.GetLength(1)== m.GetColumna(0).Length){
                     double [,] matrizResultante = new double [this.matriz.GetLength(0),m.GetFila(0).Length];
                     for(int i=0;i<this.matriz.GetLength(0);i++){
                         for(int j=0;j<m.GetFila(0).Length;j++)
                         {
                             double aux=0;
                             double[] filaA= GetFila(i);
                             double[] columnaB= m.GetColumna(j);
                             for(int k=0; k<filaA.Length;k++){
                                aux+=filaA[k]*columnaB[k];
                             }
                             matrizResultante[i,j]=aux;
                         }
                     }
                     this.matriz = matrizResultante;
                }
                
            }

EJERCICIOS 7 y 8 =========================================================================================================================================================


static void Main(string[] args)
        
            {
                    Persona p1 = new Persona();
                    p1.Nombre = "juan";
                    p1.DNI=123;

                    Persona p2 = new Persona();
                    p2.Nombre = "rdomingo";
                    p2.DNI=2345;

                    Persona p3 = new Persona();
                    p3.Nombre = "ricardito";
                    p3.DNI=6745;

                    ListaDePersonas listaPersonas = new ListaDePersonas();
                    listaPersonas.Agregar(p1).Agregar(p2).Agregar(p3);

                    Console.WriteLine(listaPersonas[p1.DNI].Nombre);
                    Console.WriteLine(listaPersonas[p2.DNI].Nombre);
                    Console.WriteLine(listaPersonas[p3.DNI].Nombre);

                    foreach(String aux in listaPersonas['r']){
                            Console.Write(aux + "   ");
                    }

                    Console.ReadKey();
            }
        
        }

        class Persona {
            public string Nombre {get;set;} //propiedadesAutoImplementadas
            public char Sexo{get;set;}
            public int DNI {get;set;}
            public DateTime FechaNacimiento {get;set;}

            public int Edad {get;}

            public object this[int n]{
                get{
                    switch(n){
                        case 0: return Nombre;
                        case 1: return Sexo;
                        case 2: return DNI;
                        case 3: return FechaNacimiento;
                        case 4: return Edad;
                        default: return null;
                    }
                }
                set{
                    switch(n){
                        case 0: Nombre=(String)value;
                                break;
                        case 1: Sexo=(Char)value;
                                break;
                        case 2: DNI=(int)value;
                                break;
                        case 3: FechaNacimiento=(DateTime)value;
                                break;
                        default:
                                Console.WriteLine("Valor de indice incorrecto");
                                break;
                        
                    }
                }
            }
        }


        class ListaDePersonas
        {
        private Hashtable ht = new Hashtable();
        public ListaDePersonas Agregar(Persona p)
        {
            ht[p.DNI] = p;
            return this;
        }

         public Persona this[int n]{
            get{
                        try 
                    {  
                        return (Persona)ht[n];
                    }
                    catch (Exception) 
                    {
                        Console.WriteLine( "No existe esa persona!");
                        return null;
                    }
                
            }
        }

        public String[] this[char c]{
            get{
                StringBuilder str=new StringBuilder(); //declaro un StringBuilder pues voy a realizar sucesivas concatenaciones
                foreach (int aux in ht.Keys){      //recorro con un foreach todas las llaves de mi tabla hash
    
                    if(  ( (Persona) ht[aux]  ).Nombre[0] == c){     //si el nombre de la persona de la tabla hash es igual a mi parametro c
                        str.Append(( (Persona) ht[aux]  ).Nombre+ '€');   //lo concateno en mi stringBuilder, agrego un caracter para posteriormente usar el método split
                    }
                    
                }
                return str.ToString().Split('€'); //uso el método split para separar cada nombre y devolver un vector de Strings
            }
        }



EJERCICIOS  10 =========================================================================================================================================================



                   private static int a; //variable statica A
        private static readonly int b; //variable estatica de solo lectura aunque modificable en el constructor de la clase
        public  A() { }    // constructor nulo privado por defecto
        public A(int i) : this() { }   //constructor publico que llama al constructor nulo definido arriba
        static A() => b = 2; //constructor estático el cual se ejecuta por defecto en algun momento antes de instanciar la clase. Y puede cambiar b pues es un constructor
        int c;   //variable privada
        public static void A1() => a = 1; //método estatico publico que setea el valor de A en 1
        public int A1(int a) => A.a + a; //metodo estatico publico que devuelve el valor pasador por parametro sumado con la variable estatica 'a' de la clase
        public static int A2; //variable estatica publica llamada A2
        static int A3 => 3;  //propiedad papá, te descubrí, publica statica de solo lectura
        private int A4() => 4; //metodo privado que devuelve 4
        public int A5 { get => 5; }  //propiedad publica de solo lectura que devuelve 5
        int A6 { set => c = value; }  // propiedad privada se solo escritura y escribe c
        public int A7 { get; set; } // propiedad publica de lectura y escritura
        public int A8 { get; } = 8; //propiedad publica de solo escritura
        public int this[int i] => i; // propiedad indizada que devuelve el indice que le mandas (muy útil jaja)
