EJERCICIO 1 =====================================================================================================================================================

class Program1
        {

            static void Main (String[] args)
            {
                    A[] vector = new A[] { new A(3), new B(5), new C(15), new D(41) };
                    foreach (A a in vector)
                    {
                    a.Imprimir();
                    Console.WriteLine();                    
                    }
                    Console.ReadKey();

                   
            }


        }
         class A
        {
            protected int _id;
            public A(int id) => _id = id;
            public virtual void Imprimir() => Console.WriteLine($"A_{_id} ");
        }
        class B : A
        {
            public B(int id) : base(id){}
            public override void Imprimir()
            {
                Console.Write($"B_{_id} --> ");
                base.Imprimir();
            }
        }
        class C : B
        {
            public C(int id) : base(id) {}
            
            public  override void Imprimir()
            {
                Console.Write($"C_{_id} --> ");
                base.Imprimir();
            }
        
        }
        class D : C
        {
            public D(int id) : base(id){}
            public override void Imprimir()
            {
                Console.Write($"D_{_id} --> ");
                base.Imprimir();
            }
        }
        
        EJERCICIO 2 =====================================================================================================================================================
                        
                        static void Main (String[] args)
            {
                    A[] vector = new A[] { new C(1), new D(2), new B(3), new D(4), new B(5) };
                    foreach (A a in vector)
                    {
                        if(  (a is B) && !(a is C || a is D) ){ // si o si debo de preguntar que no sean de los tipo C o D ya que 'is' te devuelve true si es parte de la herencia
                            a.Imprimir();
                            Console.WriteLine();  
                        }                   
                    }
                    Console.ReadKey();

                   
            }
        EJERCICIO 3 =====================================================================================================================================================
        
                 static void Main (String[] args)
                    {
                            A[] vector = new A[] { new C(1), new D(2), new B(3), new D(4), new B(5) };
                            foreach (A a in vector)
                            {
                                if( a.GetType() == typeof(B)){ // aquí no es necesario preguntar como en el caso anterior
                                    a.Imprimir();
                                    Console.WriteLine();  
                                }                   
                            }
                            Console.ReadKey();


                    }
                    
     EJERCICIO 4 =====================================================================================================================================================
     

                             using System;
                        class Program
                        {
                        static void Main(string[] args)
                        {
                        Taxi t = new Taxi(3);
                        Console.WriteLine($"Un {t.Marca} con {t.Pasajeros} pasajeros");
                        }
                        }
                        class Auto
                        {
                        public string Marca { get; private set; } = "Ford";
                        public Auto(string marca) => this.Marca = marca;
                        public Auto() { }
                        }
                        class Taxi : Auto
                        {
                        public int Pasajeros { get; private set; }
                        public Taxi(int pasajeros) => this.Pasajeros = pasajeros;
                        
                       
                        }
         
        * ¿Por qué no es necesario agregar :base en el constructor de Taxi?
         
                - no es necesario ya que como no definimos ningun constructor en la clase taxi esta ya posee el constructor nulo implícito que llama al constructor
                 nulo de la clase padre Auto que ya está definido, si yo elimino el constructor nulo de la clase auto este codigo tiraria error.       
        
        
        *Eliminar el segundo constructor  de la clase Auto y modificar la clase Taxi para el programa siga funcionando
                                       

                                         class Auto
                        {
                            public string Marca { get; private set; } = "Ford";
                            public Auto(string marca) => this.Marca = marca;

                        }
                        class Taxi : Auto
                        {
                            public int Pasajeros { get; private set; }
                            public Taxi(int pasajeros): base("default marca") => this.Pasajeros = pasajeros;
                        }


                        
   EJERCICIO 6 =============================================================================================================================================
   
   
                   class A
                {
                public string M1()   //se debe definir como virtual para que la clase derivada lo pueda ocultar
                        => "A.M1";
                }
                class B : A
                {
                public override string M1()
                         => "B.M1";
                }
                        
                -----------------------------------------------------------------------------------------------------------------------------------------  
                class A  //una clase no abstracta no puede tener un método abstracto
                {
                public abstract string M1();
                }
                                 class B : A
                {
                public override string M1()
                                 => "B.M1";
                }                
                -----------------------------------------------------------------------------------------------------------------------------------------  
                abstract class A
                {
                public abstract string M1()
                          => "A.M1";      // no dr puede declarar comportamiento en un método abstracto
                }
                class B : A
                {
                public override string M1()
                         => "B.M1";
                }
                
                -----------------------------------------------------------------------------------------------------------------------------------------  
                class A
                {
                public override string M1() //se debe declarar como virtual ya que A no es una clase derivada y no va a encontrar ningún método al cual invalidar
                         => "A.M1";
                }
                class B : A
                {
                public override string M1()
                         => "B.M1";
                }               
                -----------------------------------------------------------------------------------------------------------------------------------------  
                class A
                {
                public virtual string M1()
                => "A.M1";
                }
                class B : A
                {
                protected override string M1()   // cuando invalido un método con otro estos deben tener el mismo identificador de acceso
                => "B.M1";
                }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                 class A
                {
                    public static virtual string M1()  //no podemos invalidar un método estático
                            => "A.M1";
                    }
                    class B : A
                    {
                    public static override string M1()
                            => "B.M1";
                }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                class A
                {
                virtual string M1() => "A.M1"; //un método invalidable no puede ser privado
                }
                class B : A
                {
                override string M1() => "B.M1";  // no encuentra al miembro validable ya que es privado
                }
                
                -----------------------------------------------------------------------------------------------------------------------------------------  
                     class A
                    {
                         protected A(int i) { }

                    }
                    class B : A
                    {
                         B() { }  //por defecto el constructor de la clase derivada llama al constructor nulo de la clase padre pero este no está agregado en la clase padre
                                       // ya que al declarar otro constructor, el constructor nulo implicito desaparece

                    }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                        class A
                    {
                    private int _id;
                        protected A(int i) => _id = i;
                    }
                    class B : A
                    {
                        B(int i):base(5) {
                            _id=i; //como _id es privada la clase B no tiene alcance, se debería de usar el identificador 'protected'
                        }
                    }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                class A
                {
                private int Prop
                {
                set; public get; //si queremos definir que un get tenga distinto alcance de un set, debemos de poner el identificador de acceso con mayor rango
                }                       //en la declaración de la propiedad;
                }
                class B : A
                {
                }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                abstract class A
                    {
                    public abstract int Prop
                         {set; get;}   //el metodo abstracto define que la propiedad Prop tiene que ser de lectura y escritura
                    }
                    class B : A
                    {
                        int f;
                    public override int Prop
                    {
                        get => 5;  //y aca solo definimos la lectura
                    }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                abstract class A
                {
                public int Prop {set; get;} // no está marcado como virtual
                }
                class B : A
                {
                public override int Prop {
                get => 5;
                set {}
                }
                }
                -----------------------------------------------------------------------------------------------------------------------------------------  
                
                
                
EJERCICIO 7 =========================================================================================================================================================






                class Program1
                {

                    static void Main (String[] args)
                    {
                        Imprimidor.Imprimir(new A(), new B(), new C(), new D());

                        Console.ReadKey();


                    }
                abstract class claseLetra {
                        public abstract void Imprimir();
                }
                class A:claseLetra {
                        public override void  Imprimir() => Console.WriteLine("Soy una instancia A");
                }
                class B:claseLetra {
                        public override void Imprimir() => Console.WriteLine("Soy una instancia B");
                }
                class C:claseLetra {
                        public override void Imprimir() => Console.WriteLine("Soy una instancia C");
                }
                class D:claseLetra {
                        public override void Imprimir() => Console.WriteLine("Soy una instancia D");
                }
                static class Imprimidor {
                        public static void Imprimir(params object[] vector) {
                                foreach (claseLetra x in vector) {
                                        x.Imprimir();
                                }
                        }
                }


                }






EJERCICIO 8 =========================================================================================================================================================


        8) Crear un programa para gestionar empleados en una empresa. Los empleados deben tener las
        propiedades públicas de sólo lectura Nombre, DNI, FechaDeIngreso, SalarioBase y Salario. Los
        valores de estas propiedades (a excepción de Salario que es una propiedad calculada) deben
        establecerse por medio de un constructor adecuado.
        Existen dos tipos de empleados: Administrativo y Vendedor. No se podrán crear objetos de la
        clase padre Empleado, pero sí de sus clases hijas (Administrativo y Vendedor). Aparte de las
        propiedades de solo lectura mencionadas, el administrativo tiene otra propiedad pública de
        lectura/escritura llamada Premio y el vendedor tiene otra propiedad pública de lectura/escritura
        llamada Comision.
        La propiedad de solo lectura Salario, se calcula como el salario base más la comisión o el premio
        según corresponda.

        Las clases tendrán además un método público llamado AumentarSalario() que tendrá una
        implementación distinta en cada clase. En el caso del administrativo se incrementará el salario base
        en un 1% por cada año de antigüedad que posea en la empresa, en el caso del vendedor se
        incrementará el salario base en un 5% si su antigüedad es inferior a 10 años o en un 10% en caso
        contrario.



                static void Main (String[] args)
            {
                
                Empleado[] empleados = new Empleado[] {
                new Administrativo("Ana", 20000000, DateTime.Parse("4/5/2018"), 10000) {Premio=1000},
                new Vendedor("Diego", 30000000, DateTime.Parse("2/4/2010"), 10000) {Comision=2000},
                new Vendedor("Luis", 33333333, DateTime.Parse("30/12/2011"), 10000) {Comision=2000}
                };
                foreach (Empleado e in empleados)
                {
                Console.WriteLine(e);
                e.AumentarSalario();
                Console.WriteLine(e);
                Console.WriteLine();
                }               
                  
                Console.ReadKey();

                   
            }
        }
            public abstract class Empleado 
            {
                public string Nombre {get;}
                public int Dni{get;}

                public DateTime FechaIngreso{get;}


                public double SalarioBase {
                        get;
                        protected set; //solo accesible desde la propia clase y sus clases derivadas
                }

                public abstract double Salario {get;} //propiedad abstracta ya que dependiendo del tipo de empleado se calcula de una manera u otra

                public Empleado(string nombre, int dni, DateTime fechaIngreso,double salarioBase) //todos los atributos que tienen en comun los dos tipos de empleado
                {
                        this.Nombre=nombre;
                        this.Dni=dni;
                        this.FechaIngreso=fechaIngreso;
                        this.SalarioBase=salarioBase;
                }

                public abstract void AumentarSalario(); //abstracto ya que dependiendo del tipo de empleado se calcula de manera distinta


                
                public override string ToString(){  //sobreescribo el metodo toString en la clase base ya que las dos clases derivadas tienen los mismos datos aunque uno(Salario) se calcule de manera distinta
                        TimeSpan dif_fechas = DateTime.Now.Subtract(this.FechaIngreso); //obtiene la diferencia de tiempo entre las dos fechas
                        int diasDeAntiguedad =  dif_fechas.Days;
                        int añosDeAntiguedad = diasDeAntiguedad/ 365; //dos valores enteros me dan otro valor entero 
                        return $"Administrativo Nombre: {this.Nombre}, DNI: {this.Dni}  Antigüedad: {añosDeAntiguedad} \n Salario base: {this.SalarioBase}, Salario: {this.Salario};  ";
                }


                

            }

            public class Administrativo:Empleado {
                public double Premio{get;set;}

                public override double Salario
                {
                        get {return this.SalarioBase + this.Premio;}
                } 
                       
                
                public Administrativo(string nombre, int dni, DateTime fechaIngreso,double salarioBase) :base(nombre,dni,fechaIngreso,salarioBase)
                {
                        
                }

                public override void AumentarSalario()
                {
                        TimeSpan dif_fechas = DateTime.Now.Subtract(this.FechaIngreso); //obtiene la diferencia de tiempo entre las dos fechas
                        int diasDeAntiguedad =  dif_fechas.Days; //dias de diferencia
                        int añosDeAntiguedad = diasDeAntiguedad / 365; //dos valores enteros me dan otro valor entero 
                        this.SalarioBase*=(Math.Pow(1.01,añosDeAntiguedad));
                }

            }


            public class Vendedor:Empleado {
                
                public double Comision{get;set;}

                public override double Salario
                {
                        get {return this.SalarioBase + this.Comision;}
                } 
                public Vendedor(string nombre, int dni, DateTime fechaIngreso,double salarioBase) :base(nombre,dni,fechaIngreso,salarioBase)
                {

                }


                public override void AumentarSalario()
                 {
                        TimeSpan dif_fechas = DateTime.Now.Subtract(this.FechaIngreso); //obtiene la diferencia de tiempo entre las dos fechas
                        int diasDeAntiguedad =  dif_fechas.Days;
                        int añosDeAntiguedad = diasDeAntiguedad / 365; //dos valores enteros me dan otro valor entero 
                        if(añosDeAntiguedad < 10)
                        {
                                this.SalarioBase*=1.05;    
                        }
                        else
                        {
                                this.SalarioBase*=1.10;    
                        }
                                
                }
                
             
            }

                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
