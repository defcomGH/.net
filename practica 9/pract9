EJERCICIO 1 ==================================================================================================================================================================

class Program
            {
                static void Main()
                {
                    ArrayList lista=new ArrayList() {"hola",7,'A'};
                    string st = Get<string>(lista,0);
                    int i = Get<int>(lista,1);
                    char c = Get<char>(lista,2);
                    Console.WriteLine($"{st} {i} {c}");

                    Console.ReadKey();
                }

                static T Get<T>(ArrayList l, int pos)
                {
                    return (T) l[pos];
                }
            }
            
EJERCICIO 2 ==================================================================================================================================================================

  class Program
            {
                static void Main()
                {
                    int[] vector1 = new int[] { 1, 2, 3 };
                    bool[] vector2 = new bool[] { true, true, true };
                    string[] vector3= new string[] { "uno", "dos", "tres" };
                    Set<int>(vector1, 110, 2);
                    Set<bool>(vector2, false, 1);
                    Set<string>(vector3, "Hola Mundo!", 0);
                    Imprimir(vector1);
                    Imprimir(vector2);
                    Imprimir(vector3);

                    Console.ReadKey();
                }

                static void Set<T>(T[] v,T dato , int pos)
                {
                    v[pos] = dato;
                }
                static void Imprimir<T>(T[] v)
                {
                    foreach(T aux in v)
                    {
                        Console.Write($"{aux} - ");
                    }
                    Console.WriteLine();
                } 

             
    
            }
EJERCICIO 3 ==================================================================================================================================================================

class Program
            {
                static void Main()
                {
                    string[] vector1 = CrearArreglo<string>("uno", "dos");

                    foreach (string st in vector1) Console.Write(st + " - ");

                    Console.WriteLine();
                    double[] vector2 = CrearArreglo<double>(1, 2.3, 4.1, 6.7);

                    foreach (double valor in vector2) Console.Write(valor + " - ");

                    Console.WriteLine();

                    ArrayList lista = new ArrayList();
                    Stack pila = new Stack();

                    var a = CrearObjetoDelMismoTipo(lista);
                    var b = CrearObjetoDelMismoTipo(12);
                    var c = CrearObjetoDelMismoTipo('A');
                    var d = CrearObjetoDelMismoTipo(pila);

                    Console.WriteLine(a.GetType());
                    Console.WriteLine(b.GetType());
                    Console.WriteLine(c.GetType());
                    Console.WriteLine(d.GetType());

                    Console.ReadKey();
                }

                static T[] CrearArreglo<T> (params T[] v)
                {
                    T[] newVector= new T[v.Length];
                    int pos=0;
                    foreach(T aux in v)
                    {
                        newVector[pos++]=aux;
                    }
                    return newVector;
                }

                static T CrearObjetoDelMismoTipo<T>(T a) where T: new()
                {
                    T nuevo = new T();
                    return nuevo;
                }

                static void Set<T>(T[] v,T dato , int pos)
                {
                    v[pos] = dato;
                }
                static void Imprimir<T>(T[] v)
                {
                    foreach(T aux in v)
                    {
                        Console.Write($"{aux} - ");
                    }
                    Console.WriteLine();
                } 
               
            }      

EJERCICIO 4 ==================================================================================================================================================================

             class Program
            {
                static void Main()
                {
                    ListaGenerica<int> lista = new ListaGenerica<int>();
                    lista.AgregarAdelante(3);
                    lista.AgregarAdelante(100);
                    lista.AgregarAtras(10);
                    lista.AgregarAtras(11);
                    lista.AgregarAdelante(0);
                    IEnumerator<int> enumerador = lista.GetEnumerator();
                    while (enumerador.MoveNext())
                    {
                        int i = enumerador.Current;
                        Console.Write(i + " ");
                    }
                    
                    Console.ReadKey();
                }
               
            }

            class Nodo<T>
            {
                    public T Valor { get; private set; }
                    public Nodo<T> Proximo { get; set; } = null;
                    public Nodo(T valor) => Valor = valor;
            }

            class ListaGenerica<T> : IEnumerable<T> 
            {
                private Nodo<T> primerElemento = null;
                public void AgregarAdelante(T dato)
                {
                    Nodo <T> nodoNuevo = new Nodo<T>(dato);
                    if(primerElemento == null)
                    {
                        primerElemento = nodoNuevo;
                    }
                    else
                    {
                        nodoNuevo.Proximo = primerElemento;
                        primerElemento=nodoNuevo;
                    }
                }
                public void AgregarAtras(T dato)
                {
                    Nodo <T> nodoNuevo = new Nodo<T>(dato);
                    if(primerElemento == null)
                    {
                        primerElemento = nodoNuevo;
                    }
                    else
                    {
                        Nodo<T> aux = primerElemento;
                        while(aux.Proximo !=null){
                            aux = aux.Proximo;
                        }
                        aux.Proximo = nodoNuevo;
                    }
                }

                public IEnumerator<T> GetEnumerator()
                {
                    return new EnumeradorLista<T>(primerElemento);
                }

                private IEnumerator GetEnumerator1()
                {
                    return this.GetEnumerator();
                }
                IEnumerator IEnumerable.GetEnumerator()
                {
                    return GetEnumerator1();
                }
                
            }
            class EnumeradorLista<T> : IEnumerator<T>
            {
                Nodo<T> Inicio;
                Nodo<T> Actual; 

                bool PrimerNext = true; //como hacemos moveNext y despues leemos , si o si en el primer MoveNext() no me debo de mover porque sino
                                        // no leiría el primer valor
                public EnumeradorLista(Nodo<T> primero)
                {
                    Inicio=primero;
                    Actual=primero;
                }
                public bool MoveNext()
                {
                    if(!PrimerNext)
                    {
                        Actual = Actual.Proximo;
                    }
                    else
                    {
                        PrimerNext=false;
                    }
                       
                    if(Actual != null)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                public void Reset()
                {
                    PrimerNext = true;
                    Actual = null;
                }
                public T Current{
                    get{
                        return Actual.Valor;
                    }
                }
                object IEnumerator.Current
                {
                    get{
                        return Actual.Valor;
                    }
                }

                void IDisposable.Dispose() { }
            }
          
EJERCICIO 5 ==================================================================================================================================================================
class Program
    {
        static void Main(string[] args)
        {
    
            Nodo<int> n = new Nodo<int>(7);
            n.Insertar(3);
            n.Insertar(1);
            n.Insertar(5);
            n.Insertar(12);
            foreach (int elem in n.InOrder)
            {
            Console.Write(elem + " ");
            }
            Console.WriteLine();
            Console.WriteLine($"Altura: {n.Altura}");
            Console.WriteLine($"Cantidad: {n.CantNodos}");
            Console.WriteLine($"Mínimo: {n.ValorMinimo}");
            Console.WriteLine($"Máximo: {n.ValorMaximo}");
            Nodo<string> n2 = new Nodo<string>("hola");
            n2.Insertar("Mundo");
            n2.Insertar("XYZ");
            n2.Insertar("ABC");
            foreach (string elem in n2.InOrder)
            {
            Console.Write(elem + " ");
            }
            Console.WriteLine();
            Console.WriteLine($"Altura: {n2.Altura}");
            Console.WriteLine($"Cantidad: {n2.CantNodos}");
            Console.WriteLine($"Mínimo: {n2.ValorMinimo}");
            Console.WriteLine($"Máximo: {n2.ValorMaximo}");

            Console.ReadKey();

        }
    }
    

    class Nodo<T> where T: IComparable<T>
    {
        private T valor;
        private Nodo<T> hijoIzquierdo=null;
        private Nodo<T> hijoDerecho=null;

        public Nodo(T n){
            this.valor=n;
        }

        public Boolean Insertar (T n){
            if(n.CompareTo(valor)==0)
            {
                Console.WriteLine("El valor ingresado ya está dentro del arbol");
                return false;
            }
            if(n.CompareTo(valor) > 0){ //si n es mas grande que valor me devuelve un numero positivo
                if(hijoDerecho != null)
                {
                    return hijoDerecho.Insertar(n);
                }
                else
                {
                    hijoDerecho = new Nodo<T>(n);
                    return true;
                }
            }
            else
            {
                if(hijoIzquierdo != null)
                {
                    return hijoIzquierdo.Insertar(n);
                }
                else
                {
                    hijoIzquierdo = new Nodo<T>(n);
                    return true;
                }
            }
        }


        public List<T> InOrder{
                get{
                    List<T> l = new List<T>();
                    GetInOrder(ref l);
                    return l;
                }
        }

        private void GetInOrder (ref List<T> l)
        {
            if(hijoIzquierdo!= null)
            {
                hijoIzquierdo.GetInOrder(ref l);
            }

            l.Add(this.valor);
            if(hijoDerecho != null)
            {
                hijoDerecho.GetInOrder(ref l);
            }
        }

        public int Altura{
            get{
                int x=0;
                GetAltura(ref x,0);
                return x;
            }
        }
        private void GetAltura(ref int n,int k){
            if(n < k) {
                n=k;
            }
            if(hijoIzquierdo!=null)
            {
                hijoIzquierdo.GetAltura(ref n,k+1);
            }
            if(hijoDerecho!= null)
            {
                hijoDerecho.GetAltura(ref n,k+1);
            }
        }


        public int CantNodos
        {
           get{
                int x = 0;
                GetCantNodos(ref x);
                return x;
           } 
        }
        private void GetCantNodos(ref int n)
        {
            n++;
            if(hijoIzquierdo != null){
                hijoIzquierdo.GetCantNodos(ref n);
            }  
            if(hijoDerecho != null)
            {
                hijoDerecho.GetCantNodos(ref n);
            }
        }

        public T ValorMaximo
        {
           get{
                if(hijoDerecho!= null)
                {
                    return hijoDerecho.ValorMaximo;
                }
                else
                {
                    return valor;
                }
           } 
        }

        public T ValorMinimo 
        {
            get{
                if(hijoIzquierdo!= null)
                {
                    return hijoIzquierdo.ValorMinimo;
                }
                else
                {
                    return valor;
                }
            }
            
        }
           
    }                                                            
EJERCICIO 6 ==================================================================================================================================================================
EJERCICIO 7 ==================================================================================================================================================================
class Program
    {
        static void Main(string[] args)
        {
    
            List<Persona>   listaPersonas = new List<Persona>();

            listaPersonas.Add(new Persona(){Nombre="pepe1",Edad = 211});

            listaPersonas.Add(new Persona(){Nombre="pepe2",Edad = 212});

            listaPersonas.Add(new Persona(){Nombre="pepe3",Edad = 213});

            listaPersonas.Add(new Persona(){Nombre="pepe4",Edad = 214});

            List<Par<string,int>> listaPar = listaPersonas.ConvertAll(new Converter<Persona, Par<string,int>>(PersonaToPar));

            foreach(Par<string,int> aux in listaPar )
            {
                Console.WriteLine($"{aux.A}  {aux.B}     ");
            }
            Console.ReadKey();

        }

        
        static Par<string,int> PersonaToPar(Persona p)
    {
        return new Par<string,int> (p.Nombre,p.Edad);
    }

        /*static void Agregar<T>(Nodo<T> nodo,params T[] v) where T: Nodo<T> , IComparable,new()
        {
            
            foreach(T aux in v)
            {
                
            }
        }*/
        class Persona
        {
            public String Nombre {get;set;}
            public int Edad{set;get;}

        }
        class Par<T1, T2>
        {
            public T1 A { get; private set; }
            public T2 B { get; private set; }
            public Par(T1 a, T2 b)
            {
                this.A = a;
                this.B = b;
            }
        }
        
    }
EJERCICIO 8 ==================================================================================================================================================================
class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Environment.CurrentDirectory);
            Console.WriteLine("Ingrese nombre del archivo");
            String strAux;
            strAux=Console.ReadLine();

            Console.WriteLine("Ingrese el nombre del archivo");

                StreamReader sw = null;

                try
                {
                    sw=new StreamReader(strAux);

                    SortedDictionary<string,int> Diccionario = new SortedDictionary<string,int>();

                    while((strAux=sw.ReadLine()) != null)
                    {
                        string[] vectorStrings=strAux.Split(' ');
                       
                            foreach(string aux in vectorStrings)
                            {
                                if(aux!=""){
                                    if(!Diccionario.ContainsKey(aux))
                                    {
                                        Diccionario.Add(aux,1);
                                    }
                                    else
                                    {
                                        Diccionario[aux]++;
                                    }
                                }
                                
                                
                            }  
                    }

                    foreach (KeyValuePair<string,int> aux in Diccionario)
                    {
                            Console.WriteLine($"{aux.Key} : {aux.Value}");
                    }

                    
                    
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                finally
                {
                    if(sw!=null)
                    {
                        sw.Dispose();
                    }
                }

                Console.ReadLine();
        }  
    }
EJERCICIO 9 ==================================================================================================================================================================

class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Environment.CurrentDirectory);

            String strAux1,strAux2;
            Console.WriteLine("Ingrese nombre del archivo1");        
            strAux1=Console.ReadLine();
            Console.WriteLine("Ingrese nombre del archivo2");
            strAux2=Console.ReadLine();

                StreamReader sw1 = null;
                StreamReader sw2 = null;
                List<String> lista1;
                List<String> lista2;

                try
                {
                    sw1=new StreamReader(strAux1);
                    sw2=new StreamReader(strAux2);

                    //sw1=new StreamReader("archivo1.txt");
                    //sw2=new StreamReader("archivo2.txt");

                    lista1= StringsToListaOrdenada(sw1);
                    lista2= StringsToListaOrdenada(sw2);


                    foreach(string aux in lista1)
                    {
                        Console.WriteLine(aux);
                    }
                    Console.WriteLine();
                    foreach(string aux in lista2)
                    {
                        Console.WriteLine(aux);
                    }
                    Console.WriteLine();
                        
                   
                    var listaFinal =lista1.Union(lista2);
                    int espaciado =0;
                    foreach(string aux in listaFinal)
                    {
                        Console.Write($" {aux} -");
                        if(espaciado == 5)
                        {
                            Console.WriteLine();
                        }
                    }
                   

                    
                    
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                finally
                {
                    if(sw1==null)
                    {
                        sw1.Dispose();
                    }
                    if(sw2==null)
                    {
                        sw2.Dispose();
                    }
                }

                Console.ReadLine();
        }  

        public static List<string> StringsToListaOrdenada(StreamReader sr)
        {
            List<string> lista = new List<string>();
            string strAux;
            string[] vectorStrings;
             while((strAux=sr.ReadLine()) != null)
                    {
                        vectorStrings=strAux.Split(' ');
                        foreach(string aux in vectorStrings)
                        {
                            if(aux!= "")
                            {
                                lista.Add(aux);
                            }
                            
                        }
                       
                    }

                     lista.Sort();
            return lista;
        }
    }
EJERCICIO 10 ================================================================================================================================================================


class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Environment.CurrentDirectory);

            String strAux1,strAux2;
            Console.WriteLine("Ingrese nombre del archivo1");        
            strAux1=Console.ReadLine();
            Console.WriteLine("Ingrese nombre del archivo2");
            strAux2=Console.ReadLine();

                StreamReader sr1 = null;
                StreamReader sr2 = null;
                List<String> lista1;
                List<String> lista2;

                try
                {
                    sr1=new StreamReader(strAux1);
                    sr2=new StreamReader(strAux2);

                    //sr1=new StreamReader("archivo1.txt");
                    //sr2=new StreamReader("archivo2.txt");

                    lista1= StringsToListaOrdenada(sr1);
                    lista2= StringsToListaOrdenada(sr2);


                    foreach(string aux in lista1)
                    {
                        Console.WriteLine(aux);
                    }
                    Console.WriteLine();
                    foreach(string aux in lista2)
                    {
                        Console.WriteLine(aux);
                    }
                    Console.WriteLine();
                        
                   
                    var listaFinal =lista1.Union(lista2);
                    List<String> listaStrings=new List<string>();
                    int espaciado =0;
                    foreach(string aux in listaFinal)
                    {
                        listaStrings.Add(aux);
                        Console.Write($" {aux} -");
                        if(espaciado == 5)
                        {
                            Console.WriteLine();
                        }
                    }

                   
                    Console.WriteLine();
                    
                    StreamReadersActuales.List_sr.Add(sr1);
                    StreamReadersActuales.List_sr.Add(sr2);
                    
                    List<PalabraPosiciones> listaPalabraPosiciones = listaStrings.ConvertAll(new Converter<string, PalabraPosiciones>(StringToPalabraPosiciones));

                    foreach(PalabraPosiciones aux in listaPalabraPosiciones)
                    {
                        Console.WriteLine($"Palabra: {aux.Palabra}");
                        int n=0;
                        foreach(List<int> listaDeListasAux in aux.Posiciones)
                        {
                            Console.Write($"   |Posiciones en Texto{++n}:--> ");
                            foreach(int i in listaDeListasAux)
                            {
                                Console.Write($" {i} ");
                            }
                            Console.WriteLine();
                        }
                    }
                   
                    
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                finally
                {
                    if(sr1==null)
                    {
                        sr1.Dispose();
                    }
                    if(sr2==null)
                    {
                        sr2.Dispose();
                    }
                }


                
                Console.ReadKey();
        }   

        public static List<string> StringsToListaOrdenada(StreamReader sr)
        {
            List<string> lista = new List<string>();
            string strAux;
            string[] vectorStrings;
            //voy leyendo lineas del archivo y cada linea la divido en palabras y las agrego a una lista
             while((strAux=sr.ReadLine()) != null)
                    {
                        vectorStrings=strAux.Split(' ');
                        foreach(string aux in vectorStrings)
                        {
                            if(aux!= "")
                            {
                                lista.Add(aux);
                            }
                            
                        }
                       
                    }

                     lista.Sort(); //ordeno la lista alfabéticamente
            return lista;
        }

        
        
      
        
        public static PalabraPosiciones StringToPalabraPosiciones(string palabra)
        {
            List<StreamReader> listaReaders = StreamReadersActuales.List_sr;

            PalabraPosiciones palabraPosicionesAux = new PalabraPosiciones(palabra);

            foreach (StreamReader sr in listaReaders) //busco coincidencias en todos los archivos actuales
            {
                //reseteo el StreamReader actual
                sr.DiscardBufferedData();
                sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin);

                 //lista para guardar las posiciones en las que aparece "palabra"
                List<int> posiciones = new List<int>();
        
                string strAux;
                int posicionAux=0;
                while((strAux = sr.ReadLine())!= null) //recorro el archivo y si encuentro la palabra agrego su posicion a la lista
                {
                    if(strAux.IndexOf(palabra) != -1) //si la palabra aparece
                    {
                        posiciones.Add(strAux.IndexOf(palabra)+posicionAux); //agrego su posicion a la lista
                    }
                    posicionAux= posicionAux + strAux.Length;
                }
                palabraPosicionesAux.Posiciones.Add(posiciones);
            }
            return palabraPosicionesAux;
        }
    }

    public class PalabraPosiciones
    {
        public string Palabra { private set; get; }
        public List<List<int>> Posiciones { private set; get; } = new List<List<int>>();

        public  PalabraPosiciones(string palabra)
        {
            this.Palabra = palabra;
        }
    }

    //en esta clase la uso para guardar Streams Readers para poder acceder desde el método StringToPalabraPosiciones
    public class StreamReadersActuales 
        {
            private static List<StreamReader> _List_sr=new List<StreamReader>();
            public static List<StreamReader> List_sr
            {
                get
                {
                    return _List_sr;
                }
            }

 
    }

