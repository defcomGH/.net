EJERCICIO 1 ==================================================================================================================================================================

class Program
            {
                static void Main()
                {
                    ArrayList lista=new ArrayList() {"hola",7,'A'};
                    string st = Get<string>(lista,0);
                    int i = Get<int>(lista,1);
                    char c = Get<char>(lista,2);
                    Console.WriteLine($"{st} {i} {c}");

                    Console.ReadKey();
                }

                static T Get<T>(ArrayList l, int pos)
                {
                    return (T) l[pos];
                }
            }
            
EJERCICIO 2 ==================================================================================================================================================================

  class Program
            {
                static void Main()
                {
                    int[] vector1 = new int[] { 1, 2, 3 };
                    bool[] vector2 = new bool[] { true, true, true };
                    string[] vector3= new string[] { "uno", "dos", "tres" };
                    Set<int>(vector1, 110, 2);
                    Set<bool>(vector2, false, 1);
                    Set<string>(vector3, "Hola Mundo!", 0);
                    Imprimir(vector1);
                    Imprimir(vector2);
                    Imprimir(vector3);

                    Console.ReadKey();
                }

                static void Set<T>(T[] v,T dato , int pos)
                {
                    v[pos] = dato;
                }
                static void Imprimir<T>(T[] v)
                {
                    foreach(T aux in v)
                    {
                        Console.Write($"{aux} - ");
                    }
                    Console.WriteLine();
                } 

             
    
            }
EJERCICIO 3 ==================================================================================================================================================================

class Program
            {
                static void Main()
                {
                    string[] vector1 = CrearArreglo<string>("uno", "dos");

                    foreach (string st in vector1) Console.Write(st + " - ");

                    Console.WriteLine();
                    double[] vector2 = CrearArreglo<double>(1, 2.3, 4.1, 6.7);

                    foreach (double valor in vector2) Console.Write(valor + " - ");

                    Console.WriteLine();

                    ArrayList lista = new ArrayList();
                    Stack pila = new Stack();

                    var a = CrearObjetoDelMismoTipo(lista);
                    var b = CrearObjetoDelMismoTipo(12);
                    var c = CrearObjetoDelMismoTipo('A');
                    var d = CrearObjetoDelMismoTipo(pila);

                    Console.WriteLine(a.GetType());
                    Console.WriteLine(b.GetType());
                    Console.WriteLine(c.GetType());
                    Console.WriteLine(d.GetType());

                    Console.ReadKey();
                }

                static T[] CrearArreglo<T> (params T[] v)
                {
                    T[] newVector= new T[v.Length];
                    int pos=0;
                    foreach(T aux in v)
                    {
                        newVector[pos++]=aux;
                    }
                    return newVector;
                }

                static T CrearObjetoDelMismoTipo<T>(T a) where T: new()
                {
                    T nuevo = new T();
                    return nuevo;
                }

                static void Set<T>(T[] v,T dato , int pos)
                {
                    v[pos] = dato;
                }
                static void Imprimir<T>(T[] v)
                {
                    foreach(T aux in v)
                    {
                        Console.Write($"{aux} - ");
                    }
                    Console.WriteLine();
                } 
               
            }      

EJERCICIO 4 ==================================================================================================================================================================

             class Program
            {
                static void Main()
                {
                    ListaGenerica<int> lista = new ListaGenerica<int>();
                    lista.AgregarAdelante(3);
                    lista.AgregarAdelante(100);
                    lista.AgregarAtras(10);
                    lista.AgregarAtras(11);
                    lista.AgregarAdelante(0);
                    IEnumerator<int> enumerador = lista.GetEnumerator();
                    while (enumerador.MoveNext())
                    {
                        int i = enumerador.Current;
                        Console.Write(i + " ");
                    }
                    
                    Console.ReadKey();
                }
               
            }

            class Nodo<T>
            {
                    public T Valor { get; private set; }
                    public Nodo<T> Proximo { get; set; } = null;
                    public Nodo(T valor) => Valor = valor;
            }

            class ListaGenerica<T> : IEnumerable<T> 
            {
                private Nodo<T> primerElemento = null;
                public void AgregarAdelante(T dato)
                {
                    Nodo <T> nodoNuevo = new Nodo<T>(dato);
                    if(primerElemento == null)
                    {
                        primerElemento = nodoNuevo;
                    }
                    else
                    {
                        nodoNuevo.Proximo = primerElemento;
                        primerElemento=nodoNuevo;
                    }
                }
                public void AgregarAtras(T dato)
                {
                    Nodo <T> nodoNuevo = new Nodo<T>(dato);
                    if(primerElemento == null)
                    {
                        primerElemento = nodoNuevo;
                    }
                    else
                    {
                        Nodo<T> aux = primerElemento;
                        while(aux.Proximo !=null){
                            aux = aux.Proximo;
                        }
                        aux.Proximo = nodoNuevo;
                    }
                }

                public IEnumerator<T> GetEnumerator()
                {
                    return new EnumeradorLista<T>(primerElemento);
                }

                private IEnumerator GetEnumerator1()
                {
                    return this.GetEnumerator();
                }
                IEnumerator IEnumerable.GetEnumerator()
                {
                    return GetEnumerator1();
                }
                
            }
            class EnumeradorLista<T> : IEnumerator<T>
            {
                Nodo<T> Inicio;
                Nodo<T> Actual; 

                bool PrimerNext = true; //como hacemos moveNext y despues leemos , si o si en el primer MoveNext() no me debo de mover porque sino
                                        // no leir√≠a el primer valor
                public EnumeradorLista(Nodo<T> primero)
                {
                    Inicio=primero;
                    Actual=primero;
                }
                public bool MoveNext()
                {
                    if(!PrimerNext)
                    {
                        Actual = Actual.Proximo;
                    }
                    else
                    {
                        PrimerNext=false;
                    }
                       
                    if(Actual != null)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                public void Reset()
                {
                    PrimerNext = true;
                    Actual = null;
                }
                public T Current{
                    get{
                        return Actual.Valor;
                    }
                }
                object IEnumerator.Current
                {
                    get{
                        return Actual.Valor;
                    }
                }

                void IDisposable.Dispose() { }
            }
          
EJERCICIO 5 ==================================================================================================================================================================
EJERCICIO 6 ==================================================================================================================================================================
EJERCICIO 7 ==================================================================================================================================================================
EJERCICIO 8 ==================================================================================================================================================================
EJERCICIO 9 ==================================================================================================================================================================
EJERCICIO  ==================================================================================================================================================================
EJERCICIO  ==================================================================================================================================================================
