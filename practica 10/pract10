EJERCICIO 1 ===============================================================================================================================================================
 A.
  
  class Program
        {
            static void Main(string[] args)
            {
                Task t = new Task(Saludar);
                t.start();
                Console.ReadKey();
                t.Wait();
            }   
            static void Saludar()
            {
                Console.WriteLine("Hola Mundo!");
            }
        }
 B.
 
  class Program
    {
        static void Main(string[] args)
        {
            Task t = Task.Run(() => Saludar());

            t.Wait();

            Console.ReadKey();
        }   
        static void Saludar()
        {
            Console.WriteLine("Hola Mundo!");
        }
    }
 
 C.
      static void Main(string[] args)
        {
            Task t = Task.Run(() => {Console.WriteLine($"Hola Mundo!");});
            t.Wait();
            Console.ReadKey();
        }   
  D. 
  private delegate void Saludador();
        static void Main(string[] args)
        {
            Saludador s1 = new Saludador(Saludar);

            Task t = Run(() => (s1));
            t.Wait();
            Console.ReadKey();
        }   
        static void Saludar()
        {
            Console.WriteLine($"Hola Mundo!");
        }
EJERCICIO 2 ===============================================================================================================================================================
 class Program
    {
        static void Main(string[] args)
        {
            Task[] v=new Task[100];
            for(int i = 0 ; i < 100 ; i++)
            {
                v[i]=Task.Run(() => Imprimir());
            }

            Task.WaitAll(v);
            Console.ReadKey();
        }   
        static void Imprimir()
        {
            int idThread = System.Threading.Thread.CurrentThread.ManagedThreadId;
            int? idTarea = Task.CurrentId;
            Console.WriteLine($"Tarea: {idTarea} Thread: {idThread}");
        }
    }
EJERCICIO 3 ===============================================================================================================================================================
static void Main(string[] args)
        {
             Task[] v=new Task[4];
             for(int i = 0;i<4;i++)
             {
                 v[i]=new Task(Procesar);
             }
             DateTime t1 = DateTime.Now;
             v[0].Start();
             v[1].Start();
             v[2].Start();
             v[3].Start();
             DateTime t2 = DateTime.Now;

            Task.WaitAll(v);
            Console.WriteLine(t2.Ticks - t1.Ticks);

         
            Console.ReadKey();

        } //tardo arpoximadamente 18 mil ticks
   ---------------------------------------------
   static void Main(string[] args)
        {
             Task[] v=new Task[4];
             for(int i = 0;i<4;i++)
             {
                 v[i]=new Task(Procesar);
             }
             DateTime t1 = DateTime.Now;
             Procesar();
             Procesar();
             Procesar();
             Procesar();
             DateTime t2 = DateTime.Now;

            Console.WriteLine(t2.Ticks - t1.Ticks);

         
            Console.ReadKey();

        } // con esta tardo aproximadamente 60 mil ticks;
        
        
        
        for(int i = 0 ; i<100000 ; i++) // 73859868  ticks
             {
                Procesar();
             }
             
         for(int i = 0 ; i<100000 ; i++) // 200000  ticks
             {
                v[i].star();
             }
       

EJERCICIO 4 ===============================================================================================================================================================

static void Main(string[] args)
        {
            Task[] t= new Task[1000];
            for(int i = 0;i<1000;i++)
            {
                t[i]=new Task(Imprimir,i);
                t[i].Start();
            }

            Console.ReadKey();

        }

        static void Imprimir(object o)
        {
            Console.WriteLine($"{o} - ");
        }
EJERCICIO 5 ===============================================================================================================================================================

static void Main(string[] args)
        {
            Task[] t = new Task[1000];
            for(int i=0;i<1000;i++)
            {
                t[i] = Task.Factory.StartNew(Imprimir,i);
            }
            
                       Console.ReadKey();

        }

        static void Imprimir(object o)
        {
            Console.WriteLine($"{o} - ");
        }
EJERCICIO 6 ===============================================================================================================================================================

class Program
    {
        static void Main(string[] args)
        {
            Task[] t = new Task[1000];
            for(int i=0;i<1000;i++)
            {
                t[i] = Task.Factory.StartNew(      (o) => Console.WriteLine($"{(int)o} - "),       i);
            }
            
                       Console.ReadKey();

        }

        static void Imprimir(object o)
        {
            Console.WriteLine($"{o} - ");
        }
   
    }
EJERCICIO 7 ===============================================================================================================================================================
          7) Codificar el método static void Sumatoria(int n) que calcula la sumatoria de 1 hasta n y
          que imprime el resultado en la consola, completar el siguiente código para invocar asincrónicamente
          el método Sumatoria con argumentos que van desde 1 hasta 10. Se debe utilizar una expresión
          lambda para la definición de las tareas.
          
    class Program
    {
        private delegate void Sumar(int n);
        static void Main(string[] args)
        {
            List<Task> tareas = new List<Task>();
            for (int n = 1; n <= 10; n++)
            {
                //tareas.Add(    Task.Run(      (k) => Sumatoria((int)k)  , 3     )       );  el método task.Run no me permite la sobrecarga con un método oject
                tareas.Add(    new Task(      (o) => Sumatoria((int)o)  , n    )       );
                tareas[n-1].Start();
            }
            Task.WaitAll(tareas.ToArray());

            Console.ReadKey();
        }   
        
        static void Sumatoria(int n)
        {
            int aux = 0;
            for(int i =0;i<n;i++)
            {
                aux+=i;
            }
            Console.WriteLine($"La sumatoria de 0 hasta {n} es : {aux}");
        }
    }      


EJERCICIO 8 ===============================================================================================================================================================
    8) Codificar el método static void Sumatoria(int a, int b) que calcula la sumatoria desde a
hasta b y que imprime el resultado en la consola. Completar el siguiente código para invocar
asincrónicamente el método Sumatoria para los distintos valores de a y de b que se especifican en
las instrucciones for. Se debe utilizar una expresión lambda para la definición de las tareas.
private delegate void Sumar(int n);

        static void Main(string[] args)
        {
            List<Task> tareas = new List<Task>();
            int aux=0;
            for (int a = 1; a <= 3; a++)
            {
                for (int b = a + 2; b <= a + 4; b++)
                {
                    
                    int[] v = {a,b};
                    tareas.Add(    new Task(   (o) => Sumatoria((int[])o) ,v)  ); // uso un vector ya que solo puedo sobrecargar el constructor de la clase Task con un solo object
                    tareas[aux++].Start();
              }
            }

            Task.WaitAll(tareas.ToArray());

            Console.ReadKey();
        }   
        
        static void Sumatoria(int[] v)
        {
            int aux = 0;
            for(int i=v[0] ; i<=v[1]; i++)
            {
                aux+= i;
            }

            Console.WriteLine($"La sumatoria de {v[0]} a {v[1]} es {aux}");

        }
EJERCICIO 9 ===============================================================================================================================================================



A-----

class Program
    {
        static void Main(string[] args)
        {
            List<Task<int>> tareas = new List<Task<int>>();

            for(int n=0; n<10; n++)
            {
                tareas.Add(new Task<int>((o)=> Sumatoria((int)o) ,n+1));
                tareas[n].Start();
            }

            for(int n=0; n<10 ; n++)
            {
                Console.WriteLine(tareas[n].Result);
            }
            Console.ReadKey();
        }

        static int Sumatoria(int n)
        {
            int suma = 0;
            for(int i=1; i<n ; i++)
            {
                suma+=i;
            }
            return suma;
        }

    }
    
B------


class Program
    {
        static void Main(string[] args)
        {
            List<Task<int>> tareas = new List<Task<int>>();

            for(int n=0; n<10; n++)
            {
                tareas.Add(Task.Factory.StartNew<int>((o)=> Sumatoria((int)o) ,n+1));
            }

            for(int n=0; n<10 ; n++)
            {
                Console.WriteLine(tareas[n].Result);
            }
            Console.ReadKey();
        }

        static int Sumatoria(int n)
        {
            int suma = 0;
            for(int i=1; i<n ; i++)
            {
                suma+=i;
            }
            return suma;
        }

 
    }
EJERCICIO 10 ==============================================================================================================================================================

class Program
    {
        static string leyenda = "Valores procesados: ";
        static readonly object lockname = new object();
        public static void Main()
        {
            List<Task> tareas = new List<Task>();
            for (int n = 1; n <= 10; n++)
            {
                Task t = new Task((o) => Procesar(o), n);
                tareas.Add(t);
                t.Start();
            }
            Task.WaitAll(tareas.ToArray());
            Console.WriteLine(leyenda);

            Console.ReadKey();
        }
        static void Procesar(object obj)
        {
            
            
            lock(lockname)
            {
                 // hace algún trabajo y accede a una variable compartida;
                 leyenda += obj + " ";
            }
           
        }
    }
EJERCICIO 11 ==============================================================================================================================================================

class Program
            {
                static void Main()
                {
                    List<int> l = new List<int>();
                    List<Task<int>> tareas = new List<Task<int>>();
                    for (int a = 1; a <= 3; a++)
                    {
                        for (int b = a + 2; b <= a + 4; b++)
                        {
                            int[] v ={a,b};
                            tareas.Add(SumatoriaAsync(v));
                        }
                    }
                    Task.WaitAll(tareas.ToArray());

                    int aux=0;
                    for (int a = 1; a <= 3; a++)
                    {
                        for (int b = a + 2; b <= a + 4; b++)
                        {
                            Task<int> t = tareas[aux++];
                            Console.WriteLine($"Suma desde {a} hasta {b} = {t.Result}");
                        }
                    }
                
                        
                    

                    Console.ReadKey();
                }

                static async Task<int> SumatoriaAsync(int[] v)
                {

                    Task<int> t = new Task<int>( (n) => Sumatoria((int[])n) , v);
                    t.Start();
                    await t;

                    return t.Result;                                 
                }

                static int Sumatoria (int[] v)
                {
                    int n=0;
                    for(int i=v[0]; i<=v[1]; i++)
                    {
                        n+=i;
                    }
                    return n;
                }
             
            }
EJERCICIO 12 ==============================================================================================================================================================

class Program
    {
        static void Main(string[] args)
        {
            List<Task<int>> tareas = new List<Task<int>>();

            for(int n=1; n<=10; n++)
            {
                tareas.Add(SumatoriaAsync(n));
            }

            for(int n=0; n<10 ; n++)
            {
                Console.WriteLine(tareas[n].Result);  //se imprimen en orden pero no implica que hayan terminado en orden
            }
            Console.ReadKey();
        }

        static async Task<int> SumatoriaAsync(int n)
        {
            Task<int> t = new Task<int>( (o) => Sumatoria((int)o) ,n);
            t.Start();
            await t;
            return t.Result;  
        }

        static int Sumatoria (int n)
        {
            int suma = 0;
            for(int i=1; i<n ; i++)
            {
                suma+=i;
            }
            return suma;
        }

    }
EJERCICIO 13 ==============================================================================================================================================================
EJERCICIO 14 ==============================================================================================================================================================
EJERCICIO 15 ==============================================================================================================================================================
